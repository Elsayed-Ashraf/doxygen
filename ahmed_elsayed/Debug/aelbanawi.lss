
aelbanawi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00002f5a  00002fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000c2  008000c2  00003050  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccb  00000000  00000000  00006440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000810b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000824b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a004  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aeef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c089  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <main>
      8a:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC>:
#ifndef ADC_H
#include "ADC.h"
void ADC(const MODE_t MODE) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	31 f0       	breq	.+12     	; 0xb72 <ADC+0x2c>
     b66:	2a 81       	ldd	r18, Y+2	; 0x02
     b68:	3b 81       	ldd	r19, Y+3	; 0x03
     b6a:	21 30       	cpi	r18, 0x01	; 1
     b6c:	31 05       	cpc	r19, r1
     b6e:	49 f0       	breq	.+18     	; 0xb82 <ADC+0x3c>
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <ADC+0x4a>
	case ENABLE:
		SET_BIT(ADCSRA, 7);
     b72:	a6 e2       	ldi	r26, 0x26	; 38
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e2       	ldi	r30, 0x26	; 38
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 68       	ori	r24, 0x80	; 128
     b7e:	8c 93       	st	X, r24
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <ADC+0x4a>
		break;
	case DISABLE:
		CLEAR_BIT(ADCSRA, 7);
     b82:	a6 e2       	ldi	r26, 0x26	; 38
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e6 e2       	ldi	r30, 0x26	; 38
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	8c 93       	st	X, r24
		break;
	}
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <ADC_Conversion>:
void ADC_Conversion(const CONV_MODE_t MODE, const ADC_CH_t ADC_CH) {
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <ADC_Conversion+0x6>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <ADC_Conversion+0x8>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX &= 0XF0;		/* Clear First 4 Bits */
     bac:	a7 e2       	ldi	r26, 0x27	; 39
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e7 e2       	ldi	r30, 0x27	; 39
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 7f       	andi	r24, 0xF0	; 240
     bb8:	8c 93       	st	X, r24
	ADMUX |= ADC_CH;	/* Select Required Channel */
     bba:	a7 e2       	ldi	r26, 0x27	; 39
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e7 e2       	ldi	r30, 0x27	; 39
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	90 81       	ld	r25, Z
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	89 2b       	or	r24, r25
     bc8:	8c 93       	st	X, r24
	switch (MODE) {
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3c 83       	std	Y+4, r19	; 0x04
     bd2:	2b 83       	std	Y+3, r18	; 0x03
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	31 f0       	breq	.+12     	; 0xbe8 <ADC_Conversion+0x4c>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	21 30       	cpi	r18, 0x01	; 1
     be2:	31 05       	cpc	r19, r1
     be4:	49 f0       	breq	.+18     	; 0xbf8 <ADC_Conversion+0x5c>
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <ADC_Conversion+0x6a>
	case START:
		SET_BIT(ADCSRA, 6);
     be8:	a6 e2       	ldi	r26, 0x26	; 38
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <ADC_Conversion+0x6a>
		break;
	case STOP:
		CLEAR_BIT(ADCSRA, 6);
     bf8:	a6 e2       	ldi	r26, 0x26	; 38
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8f 7b       	andi	r24, 0xBF	; 191
     c04:	8c 93       	st	X, r24
		break;
	}
}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <ADC_Interrupt>:
void ADC_Interrupt(const MODE_t MODE) {
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <ADC_Interrupt+0x6>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	3b 83       	std	Y+3, r19	; 0x03
     c2a:	2a 83       	std	Y+2, r18	; 0x02
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	9b 81       	ldd	r25, Y+3	; 0x03
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	31 f0       	breq	.+12     	; 0xc40 <ADC_Interrupt+0x2c>
     c34:	2a 81       	ldd	r18, Y+2	; 0x02
     c36:	3b 81       	ldd	r19, Y+3	; 0x03
     c38:	21 30       	cpi	r18, 0x01	; 1
     c3a:	31 05       	cpc	r19, r1
     c3c:	49 f0       	breq	.+18     	; 0xc50 <ADC_Interrupt+0x3c>
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <ADC_Interrupt+0x4a>
	case ENABLE:
		SET_BIT(ADCSRA, 3);
     c40:	a6 e2       	ldi	r26, 0x26	; 38
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	8c 93       	st	X, r24
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <ADC_Interrupt+0x4a>
		break;
	case DISABLE:
		CLEAR_BIT(ADCSRA, 3);
     c50:	a6 e2       	ldi	r26, 0x26	; 38
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e6 e2       	ldi	r30, 0x26	; 38
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	8c 93       	st	X, r24
		break;
	}
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <ADC_Set_Prescaler>:
void ADC_Set_Prescaler(const PRESCALER_t PRESCALER){
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	0f 92       	push	r0
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= 0XF8;
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	88 7f       	andi	r24, 0xF8	; 248
     c82:	8c 93       	st	X, r24
	ADCSRA |= PRESCALER;
     c84:	a6 e2       	ldi	r26, 0x26	; 38
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e6 e2       	ldi	r30, 0x26	; 38
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	90 81       	ld	r25, Z
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	89 2b       	or	r24, r25
     c92:	8c 93       	st	X, r24
}
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <ADC_Read_Flag>:
BOOL_t ADC_Read_Flag(void){
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	0f 92       	push	r0
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	BOOL_t Flag = FALSE;
     ca6:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(ADCSRA, 4)){
     ca8:	e6 e2       	ldi	r30, 0x26	; 38
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 95       	swap	r24
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	81 70       	andi	r24, 0x01	; 1
     cb8:	90 70       	andi	r25, 0x00	; 0
     cba:	88 23       	and	r24, r24
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <ADC_Read_Flag+0x26>
		Flag = TRUE;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Flag;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <ADC_Clear_Flag>:
void ADC_Clear_Flag(void){
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, 4);
     cd4:	a6 e2       	ldi	r26, 0x26	; 38
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8f 7e       	andi	r24, 0xEF	; 239
     ce0:	8c 93       	st	X, r24
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <ADC_Init>:
void ADC_Init(void){
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX, 6); /* External Vref +5 Volt */
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 64       	ori	r24, 0x40	; 64
     cfc:	8c 93       	st	X, r24
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <ADC_Read>:
UINT16_t ADC_Read(void){
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <ADC_Read+0x6>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	UINT16_t Reading = 0;
     d0e:	1a 82       	std	Y+2, r1	; 0x02
     d10:	19 82       	std	Y+1, r1	; 0x01
	Reading = ADCL;
     d12:	e4 e2       	ldi	r30, 0x24	; 36
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
    Reading = ((UINT16_t)(ADCH << 8)) | Reading;
     d20:	e5 e2       	ldi	r30, 0x25	; 37
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	98 2f       	mov	r25, r24
     d2c:	88 27       	eor	r24, r24
     d2e:	9c 01       	movw	r18, r24
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	82 2b       	or	r24, r18
     d36:	93 2b       	or	r25, r19
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    return Reading;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <CO_SCH_Delete_Task>:
static void CO_SCH_Update_Tasks(void);
/******************************************************************************/
static TASK_t CO_SCH_Task[CO_SCH_MAX_TASKS];
static volatile BOOL_t CO_SCH_Update = FALSE;
/******************************************************************************/
void CO_SCH_Delete_Task(const UINT8_t ID){
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	89 83       	std	Y+1, r24	; 0x01
     if(ID < CO_SCH_MAX_TASKS && CO_SCH_Task[ID].pTask != NULL_PTR){
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <CO_SCH_Delete_Task+0x14>
     d5c:	4b c0       	rjmp	.+150    	; 0xdf4 <CO_SCH_Delete_Task+0xaa>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	c9 01       	movw	r24, r18
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	fc 01       	movw	r30, r24
     d74:	ec 53       	subi	r30, 0x3C	; 60
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	d1 f1       	breq	.+116    	; 0xdf4 <CO_SCH_Delete_Task+0xaa>
        CO_SCH_Task[ID].pTask = NULL_PTR;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	fc 01       	movw	r30, r24
     d96:	ec 53       	subi	r30, 0x3C	; 60
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	11 82       	std	Z+1, r1	; 0x01
     d9c:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Run = 0;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	c9 01       	movw	r24, r18
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	fc 01       	movw	r30, r24
     db4:	e7 53       	subi	r30, 0x37	; 55
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Delay = 0;
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	fc 01       	movw	r30, r24
     dd0:	e9 53       	subi	r30, 0x39	; 57
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	10 82       	st	Z, r1
        CO_SCH_Task[ID].Period = 0;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	c9 01       	movw	r24, r18
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	fc 01       	movw	r30, r24
     dee:	ec 53       	subi	r30, 0x3C	; 60
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	10 82       	st	Z, r1
     }
     else{
        /* Error: Undefined Task */
     }
}
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <CO_SCH_Init>:
/******************************************************************************/
void CO_SCH_Init(void){
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     e06:	af e5       	ldi	r26, 0x5F	; 95
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ef e5       	ldi	r30, 0x5F	; 95
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 77       	andi	r24, 0x7F	; 127
     e12:	8c 93       	st	X, r24
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     e14:	19 82       	std	Y+1, r1	; 0x01
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <CO_SCH_Init+0x28>
         CO_SCH_Delete_Task(Id);
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <CO_SCH_Delete_Task>
/******************************************************************************/
void CO_SCH_Init(void){
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	b8 f3       	brcs	.-18     	; 0xe18 <CO_SCH_Init+0x1c>
         CO_SCH_Delete_Task(Id);
     }
     /* To Do: Init Timer Here */
     TMR0_Init();
     e2a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <TMR0_Init>
     TMR0_Mode(TMR0_CTC);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <TMR0_Mode>
     TMR0_Set_Prescaler(TMR0_NO_CLK);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 38 15 	call	0x2a70	; 0x2a70 <TMR0_Set_Prescaler>
     TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 5 ms */
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	67 e2       	ldi	r22, 0x27	; 39
     e3e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <TMR0_Set_Buffer>
     TMR0_INT(TMR0_OC_INT_ENABLE);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <TMR0_INT>
}
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <CO_SCH_Add_Task>:
/******************************************************************************/
void CO_SCH_Add_Task(void (*const PTASK)(void),
                     const UINT8_t DELAY,
                     const UINT8_t PERIOD){
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <CO_SCH_Add_Task+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <CO_SCH_Add_Task+0x8>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6b 83       	std	Y+3, r22	; 0x03
     e62:	4c 83       	std	Y+4, r20	; 0x04

     static UINT8_t Id = 0;
     if(Id < CO_SCH_MAX_TASKS){
     e64:	80 91 c3 00 	lds	r24, 0x00C3
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <CO_SCH_Add_Task+0x1e>
     e6c:	5a c0       	rjmp	.+180    	; 0xf22 <CO_SCH_Add_Task+0xd2>
        CO_SCH_Task[Id].pTask = PTASK;
     e6e:	80 91 c3 00 	lds	r24, 0x00C3
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	c9 01       	movw	r24, r18
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	fc 01       	movw	r30, r24
     e86:	ec 53       	subi	r30, 0x3C	; 60
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
        CO_SCH_Task[Id].Delay = 1 + DELAY;
     e92:	80 91 c3 00 	lds	r24, 0x00C3
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	48 2f       	mov	r20, r24
     e9e:	4f 5f       	subi	r20, 0xFF	; 255
     ea0:	c9 01       	movw	r24, r18
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	fc 01       	movw	r30, r24
     eb0:	e9 53       	subi	r30, 0x39	; 57
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	40 83       	st	Z, r20
        CO_SCH_Task[Id].Period = PERIOD;
     eb6:	80 91 c3 00 	lds	r24, 0x00C3
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	c9 01       	movw	r24, r18
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	fc 01       	movw	r30, r24
     ed0:	ec 53       	subi	r30, 0x3C	; 60
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	80 83       	st	Z, r24
        CO_SCH_Task[Id].Run = 0;
     ed8:	80 91 c3 00 	lds	r24, 0x00C3
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	c9 01       	movw	r24, r18
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	fc 01       	movw	r30, r24
     ef0:	e7 53       	subi	r30, 0x37	; 55
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	10 82       	st	Z, r1
        CO_SCH_Task[Id].Id = Id;
     ef6:	80 91 c3 00 	lds	r24, 0x00C3
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 91 c3 00 	lds	r20, 0x00C3
     f02:	c9 01       	movw	r24, r18
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	82 0f       	add	r24, r18
     f0a:	93 1f       	adc	r25, r19
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	fc 01       	movw	r30, r24
     f12:	e8 53       	subi	r30, 0x38	; 56
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	40 83       	st	Z, r20
        Id++;
     f18:	80 91 c3 00 	lds	r24, 0x00C3
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 c3 00 	sts	0x00C3, r24
     }
     else{
        /* Error: Scheduler is Full */
     }
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <CO_SCH_Dispatch_Tasks>:
/******************************************************************************/
void CO_SCH_Dispatch_Tasks(void){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
     f3a:	80 91 c2 00 	lds	r24, 0x00C2
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f0       	breq	.+2      	; 0xf44 <CO_SCH_Dispatch_Tasks+0x14>
     f42:	5e c0       	rjmp	.+188    	; 0x1000 <CO_SCH_Dispatch_Tasks+0xd0>
        CO_SCH_Update_Tasks();
     f44:	0e 94 04 08 	call	0x1008	; 0x1008 <CO_SCH_Update_Tasks>
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	54 c0       	rjmp	.+168    	; 0xff4 <CO_SCH_Dispatch_Tasks+0xc4>
            if(CO_SCH_Task[Id].Run > 0){
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	fc 01       	movw	r30, r24
     f62:	e7 53       	subi	r30, 0x37	; 55
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <CO_SCH_Dispatch_Tasks+0x3e>
     f6c:	40 c0       	rjmp	.+128    	; 0xfee <CO_SCH_Dispatch_Tasks+0xbe>
               CO_SCH_Task[Id].pTask();
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	c9 01       	movw	r24, r18
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	fc 01       	movw	r30, r24
     f84:	ec 53       	subi	r30, 0x3C	; 60
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	01 90       	ld	r0, Z+
     f8a:	f0 81       	ld	r31, Z
     f8c:	e0 2d       	mov	r30, r0
     f8e:	09 95       	icall
               CO_SCH_Task[Id].Run--;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	fc 01       	movw	r30, r24
     fa6:	e7 53       	subi	r30, 0x37	; 55
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	41 50       	subi	r20, 0x01	; 1
     fb0:	c9 01       	movw	r24, r18
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	fc 01       	movw	r30, r24
     fc0:	e7 53       	subi	r30, 0x37	; 55
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	40 83       	st	Z, r20
               if(ENDED == CO_SCH_Task[Id].Period){
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	c9 01       	movw	r24, r18
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	fc 01       	movw	r30, r24
     fde:	ec 53       	subi	r30, 0x3C	; 60
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	19 f4       	brne	.+6      	; 0xfee <CO_SCH_Dispatch_Tasks+0xbe>
                  CO_SCH_Delete_Task(Id);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <CO_SCH_Delete_Task>
/******************************************************************************/
void CO_SCH_Dispatch_Tasks(void){
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
        CO_SCH_Update_Tasks();
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	08 f4       	brcc	.+2      	; 0xffc <CO_SCH_Dispatch_Tasks+0xcc>
     ffa:	a8 cf       	rjmp	.-176    	; 0xf4c <CO_SCH_Dispatch_Tasks+0x1c>
            }
            else{
               /* Task is not Ready */
            }
        }
        CO_SCH_Update = FALSE;
     ffc:	10 92 c2 00 	sts	0x00C2, r1
     }
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <CO_SCH_Update_Tasks>:
/******************************************************************************/
static void CO_SCH_Update_Tasks(void){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	UINT8_t Id;
       for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	78 c0       	rjmp	.+240    	; 0x1106 <CO_SCH_Update_Tasks+0xfe>
           if(CO_SCH_Task[Id].pTask != NULL_PTR){
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	c9 01       	movw	r24, r18
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	fc 01       	movw	r30, r24
    102c:	ec 53       	subi	r30, 0x3C	; 60
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	09 f4       	brne	.+2      	; 0x103a <CO_SCH_Update_Tasks+0x32>
    1038:	63 c0       	rjmp	.+198    	; 0x1100 <CO_SCH_Update_Tasks+0xf8>
              CO_SCH_Task[Id].Delay--;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	c9 01       	movw	r24, r18
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	82 0f       	add	r24, r18
    1048:	93 1f       	adc	r25, r19
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	fc 01       	movw	r30, r24
    1050:	e9 53       	subi	r30, 0x39	; 57
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	41 50       	subi	r20, 0x01	; 1
    105a:	c9 01       	movw	r24, r18
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	fc 01       	movw	r30, r24
    106a:	e9 53       	subi	r30, 0x39	; 57
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	40 83       	st	Z, r20
              if(ENDED == CO_SCH_Task[Id].Delay){
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	c9 01       	movw	r24, r18
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	fc 01       	movw	r30, r24
    1086:	e9 53       	subi	r30, 0x39	; 57
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	c1 f5       	brne	.+112    	; 0x1100 <CO_SCH_Update_Tasks+0xf8>
                 CO_SCH_Task[Id].Run++;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	c9 01       	movw	r24, r18
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	fc 01       	movw	r30, r24
    10a6:	e7 53       	subi	r30, 0x37	; 55
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	4f 5f       	subi	r20, 0xFF	; 255
    10b0:	c9 01       	movw	r24, r18
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	fc 01       	movw	r30, r24
    10c0:	e7 53       	subi	r30, 0x37	; 55
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	40 83       	st	Z, r20
                 CO_SCH_Task[Id].Delay = CO_SCH_Task[Id].Period;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	48 2f       	mov	r20, r24
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	c9 01       	movw	r24, r18
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	82 0f       	add	r24, r18
    10da:	93 1f       	adc	r25, r19
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	ec 53       	subi	r30, 0x3C	; 60
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	20 81       	ld	r18, Z
    10ea:	ca 01       	movw	r24, r20
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	fc 01       	movw	r30, r24
    10fa:	e9 53       	subi	r30, 0x39	; 57
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	20 83       	st	Z, r18
     }
}
/******************************************************************************/
static void CO_SCH_Update_Tasks(void){
	UINT8_t Id;
       for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	08 f4       	brcc	.+2      	; 0x110e <CO_SCH_Update_Tasks+0x106>
    110c:	84 cf       	rjmp	.-248    	; 0x1016 <CO_SCH_Update_Tasks+0xe>
           }
           else{
              /* Error: Undefined Task */
           }
       }
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <CO_SCH_Start>:
/******************************************************************************/
void CO_SCH_Start(void){
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
     /* To Do: Enable Interrupt Here */
	TMR0_Set_Prescaler(TMR0_DF1024);				/* Tick = 128 us */
    111e:	85 e0       	ldi	r24, 0x05	; 5
    1120:	0e 94 38 15 	call	0x2a70	; 0x2a70 <TMR0_Set_Prescaler>
	TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 5 ms */
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	67 e2       	ldi	r22, 0x27	; 39
    1128:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <TMR0_Set_Buffer>
	GIE;
    112c:	af e5       	ldi	r26, 0x5F	; 95
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e5       	ldi	r30, 0x5F	; 95
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	8c 93       	st	X, r24
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <CO_SCH_Stop>:
/******************************************************************************/
void CO_SCH_Stop(void){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	GIC;
    1148:	af e5       	ldi	r26, 0x5F	; 95
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ef e5       	ldi	r30, 0x5F	; 95
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	8c 93       	st	X, r24
	TMR0_Set_Prescaler(TMR0_NO_CLK);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 38 15 	call	0x2a70	; 0x2a70 <TMR0_Set_Prescaler>
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <__vector_10>:
void CO_SCH_Sleep(void){
     /* To Do: */
}
#endif
/******************************************************************************/
ISR(TIMER0_COMP_VECT){
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	8f 93       	push	r24
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
     CO_SCH_Update = TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 c2 00 	sts	0x00C2, r24
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	8f 91       	pop	r24
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <DIO_INIT>:
#endif
/****************************************************************************/
#ifndef DIO_H
#include "DIO.h"
/****************************************************************************/
void DIO_INIT(void){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_INIT+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_INIT+0x8>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
    1198:	1a 82       	std	Y+2, r1	; 0x02
    119a:	a2 c0       	rjmp	.+324    	; 0x12e0 <DIO_INIT+0x154>
		Port_Id = Pin_Id / 8;
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	86 95       	lsr	r24
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	89 83       	std	Y+1, r24	; 0x01
		switch (Pin_Direction[Pin_Id]) {
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	fc 01       	movw	r30, r24
    11ae:	e8 59       	subi	r30, 0x98	; 152
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	59 f0       	breq	.+22     	; 0x11dc <DIO_INIT+0x50>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <DIO_INIT+0x46>
    11d0:	59 c0       	rjmp	.+178    	; 0x1284 <DIO_INIT+0xf8>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	49 f1       	breq	.+82     	; 0x122c <DIO_INIT+0xa0>
    11da:	7f c0       	rjmp	.+254    	; 0x12da <DIO_INIT+0x14e>
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	fc 01       	movw	r30, r24
    11e8:	e6 57       	subi	r30, 0x76	; 118
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	a0 81       	ld	r26, Z
    11ee:	b1 81       	ldd	r27, Z+1	; 0x01
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	fc 01       	movw	r30, r24
    11fc:	e6 57       	subi	r30, 0x76	; 118
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	01 90       	ld	r0, Z+
    1202:	f0 81       	ld	r31, Z
    1204:	e0 2d       	mov	r30, r0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9c 01       	movw	r18, r24
    1212:	27 70       	andi	r18, 0x07	; 7
    1214:	30 70       	andi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_INIT+0x96>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_INIT+0x92>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	57 c0       	rjmp	.+174    	; 0x12da <DIO_INIT+0x14e>
			break;
		case DIO_PIN_DIRECTION_INPUT_PULL_UP:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	fc 01       	movw	r30, r24
    1238:	e6 57       	subi	r30, 0x76	; 118
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	a0 81       	ld	r26, Z
    123e:	b1 81       	ldd	r27, Z+1	; 0x01
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	fc 01       	movw	r30, r24
    124c:	e6 57       	subi	r30, 0x76	; 118
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 01       	movw	r18, r24
    1262:	27 70       	andi	r18, 0x07	; 7
    1264:	30 70       	andi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_INIT+0xe4>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	2a 95       	dec	r18
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_INIT+0xe0>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_HIGH);
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    1282:	2b c0       	rjmp	.+86     	; 0x12da <DIO_INIT+0x14e>
			break;
		case DIO_PIN_DIRECTION_INPUT_FLOAT:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	fc 01       	movw	r30, r24
    1290:	e6 57       	subi	r30, 0x76	; 118
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	a0 81       	ld	r26, Z
    1296:	b1 81       	ldd	r27, Z+1	; 0x01
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	fc 01       	movw	r30, r24
    12a4:	e6 57       	subi	r30, 0x76	; 118
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	01 90       	ld	r0, Z+
    12aa:	f0 81       	ld	r31, Z
    12ac:	e0 2d       	mov	r30, r0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9c 01       	movw	r18, r24
    12ba:	27 70       	andi	r18, 0x07	; 7
    12bc:	30 70       	andi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_INIT+0x13c>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	2a 95       	dec	r18
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_INIT+0x138>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_LOW);
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
/****************************************************************************/
void DIO_INIT(void){
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	8a 83       	std	Y+2, r24	; 0x02
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 32       	cpi	r24, 0x20	; 32
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <DIO_INIT+0x15c>
    12e6:	5a cf       	rjmp	.-332    	; 0x119c <DIO_INIT+0x10>
		break;
		default:
			break;
		}
	}
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <DIO_WRITE_PIN_VALUE>:
/****************************************************************************/
void DIO_WRITE_PIN_VALUE(const DIO_PIN_ID_t PIN_ID, const DIO_PIN_STATE_t PIN_STATE){
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <DIO_WRITE_PIN_VALUE+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_WRITE_PIN_VALUE+0x8>
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	86 95       	lsr	r24
    1310:	89 83       	std	Y+1, r24	; 0x01
	switch (PIN_STATE) {
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	71 f1       	breq	.+92     	; 0x1380 <DIO_WRITE_PIN_VALUE+0x8a>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	21 30       	cpi	r18, 0x01	; 1
    132a:	31 05       	cpc	r19, r1
    132c:	09 f0       	breq	.+2      	; 0x1330 <DIO_WRITE_PIN_VALUE+0x3a>
    132e:	50 c0       	rjmp	.+160    	; 0x13d0 <DIO_WRITE_PIN_VALUE+0xda>
	case DIO_PIN_STATE_HIGH:
		SET_BIT(*Reg[Port_Id], PIN_ID % 8);
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	fc 01       	movw	r30, r24
    133c:	ee 56       	subi	r30, 0x6E	; 110
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	a0 81       	ld	r26, Z
    1342:	b1 81       	ldd	r27, Z+1	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	fc 01       	movw	r30, r24
    1350:	ee 56       	subi	r30, 0x6E	; 110
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	01 90       	ld	r0, Z+
    1356:	f0 81       	ld	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9c 01       	movw	r18, r24
    1366:	27 70       	andi	r18, 0x07	; 7
    1368:	30 70       	andi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_WRITE_PIN_VALUE+0x80>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_WRITE_PIN_VALUE+0x7c>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	28 c0       	rjmp	.+80     	; 0x13d0 <DIO_WRITE_PIN_VALUE+0xda>
		break;
	case DIO_PIN_STATE_LOW:
		CLEAR_BIT(*Reg[Port_Id], PIN_ID % 8);
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	fc 01       	movw	r30, r24
    138c:	ee 56       	subi	r30, 0x6E	; 110
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	a0 81       	ld	r26, Z
    1392:	b1 81       	ldd	r27, Z+1	; 0x01
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	fc 01       	movw	r30, r24
    13a0:	ee 56       	subi	r30, 0x6E	; 110
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	01 90       	ld	r0, Z+
    13a6:	f0 81       	ld	r31, Z
    13a8:	e0 2d       	mov	r30, r0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 01       	movw	r18, r24
    13b6:	27 70       	andi	r18, 0x07	; 7
    13b8:	30 70       	andi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_WRITE_PIN_VALUE+0xd0>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_WRITE_PIN_VALUE+0xcc>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <DIO_READ_PIN_VALUE>:
/****************************************************************************/
DIO_PIN_STATE_t DIO_READ_PIN_VALUE(const DIO_PIN_ID_t PIN_ID){
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <DIO_READ_PIN_VALUE+0x6>
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8b 83       	std	Y+3, r24	; 0x03
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	86 95       	lsr	r24
    13f2:	86 95       	lsr	r24
    13f4:	86 95       	lsr	r24
    13f6:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PIN_STATE_t State = DIO_PIN_STATE_LOW;
    13f8:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_STATE_HIGH == GET_BIT(*Reg[Port_Id], PIN_ID % 8)){
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	fc 01       	movw	r30, r24
    1406:	e6 56       	subi	r30, 0x66	; 102
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	01 90       	ld	r0, Z+
    140c:	f0 81       	ld	r31, Z
    140e:	e0 2d       	mov	r30, r0
    1410:	80 81       	ld	r24, Z
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	87 70       	andi	r24, 0x07	; 7
    141e:	90 70       	andi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_READ_PIN_VALUE+0x48>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_READ_PIN_VALUE+0x44>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	88 23       	and	r24, r24
    1434:	11 f0       	breq	.+4      	; 0x143a <DIO_READ_PIN_VALUE+0x5a>
		State = DIO_PIN_STATE_HIGH;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <DIO_WRITE_PORT>:
/****************************************************************************/
void DIO_WRITE_PORT(const DIO_PORT_ID_t PORT_ID, const UINT8_t VALUE){
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_WRITE_PORT+0x6>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	*Reg[PORT_ID] = VALUE;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	fc 01       	movw	r30, r24
    1462:	ee 55       	subi	r30, 0x5E	; 94
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	01 90       	ld	r0, Z+
    1468:	f0 81       	ld	r31, Z
    146a:	e0 2d       	mov	r30, r0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <DIO_Read_PORT>:
/****************************************************************************/
UINT8_t DIO_Read_PORT(const DIO_PORT_ID_t PORT_ID){
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	return *Reg[PORT_ID];
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	fc 01       	movw	r30, r24
    1492:	e6 55       	subi	r30, 0x56	; 86
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	01 90       	ld	r0, Z+
    1498:	f0 81       	ld	r31, Z
    149a:	e0 2d       	mov	r30, r0
    149c:	80 81       	ld	r24, Z
}
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EXINT_Enable>:
#ifndef EXINT_H
#include "EXINT.h"
void EXINT_Enable(const EXINT_SRC_t EXINT_SRC)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <EXINT_Enable+0x6>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	89 83       	std	Y+1, r24	; 0x01
	switch(EXINT_SRC){
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3b 83       	std	Y+3, r19	; 0x03
    14bc:	2a 83       	std	Y+2, r18	; 0x02
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	89 f0       	breq	.+34     	; 0x14ea <EXINT_Enable+0x44>
    14c8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ca:	3b 81       	ldd	r19, Y+3	; 0x03
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	a1 f0       	breq	.+40     	; 0x14fa <EXINT_Enable+0x54>
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	b9 f4       	brne	.+46     	; 0x1508 <EXINT_Enable+0x62>
		case EXINT0:
		SET_BIT(GICR,INT0);
    14da:	ab e5       	ldi	r26, 0x5B	; 91
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e5       	ldi	r30, 0x5B	; 91
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 64       	ori	r24, 0x40	; 64
    14e6:	8c 93       	st	X, r24
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <EXINT_Enable+0x62>
		break;
		case EXINT1:
		SET_BIT(GICR,INT1);
    14ea:	ab e5       	ldi	r26, 0x5B	; 91
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e5       	ldi	r30, 0x5B	; 91
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	8c 93       	st	X, r24
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <EXINT_Enable+0x62>
		break;
		case EXINT2:
		SET_BIT(GICR,INT2);
    14fa:	ab e5       	ldi	r26, 0x5B	; 91
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e5       	ldi	r30, 0x5B	; 91
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 62       	ori	r24, 0x20	; 32
    1506:	8c 93       	st	X, r24
		break;
	}
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <EXINT_Disable>:

void EXINT_Disable(const EXINT_SRC_t EXINT_SRC)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <EXINT_Disable+0x6>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	switch(EXINT_SRC){
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3b 83       	std	Y+3, r19	; 0x03
    152a:	2a 83       	std	Y+2, r18	; 0x02
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	89 f0       	breq	.+34     	; 0x1558 <EXINT_Disable+0x44>
    1536:	2a 81       	ldd	r18, Y+2	; 0x02
    1538:	3b 81       	ldd	r19, Y+3	; 0x03
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	a1 f0       	breq	.+40     	; 0x1568 <EXINT_Disable+0x54>
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	9b 81       	ldd	r25, Y+3	; 0x03
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	b9 f4       	brne	.+46     	; 0x1576 <EXINT_Disable+0x62>
		case EXINT0:
		CLEAR_BIT(GICR,INT0);
    1548:	ab e5       	ldi	r26, 0x5B	; 91
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e5       	ldi	r30, 0x5B	; 91
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7b       	andi	r24, 0xBF	; 191
    1554:	8c 93       	st	X, r24
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <EXINT_Disable+0x62>
		break;
		case EXINT1:
		CLEAR_BIT(GICR,INT1);
    1558:	ab e5       	ldi	r26, 0x5B	; 91
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e5       	ldi	r30, 0x5B	; 91
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 77       	andi	r24, 0x7F	; 127
    1564:	8c 93       	st	X, r24
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <EXINT_Disable+0x62>
		break;
		case EXINT2:
		CLEAR_BIT(GICR,INT2);
    1568:	ab e5       	ldi	r26, 0x5B	; 91
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	eb e5       	ldi	r30, 0x5B	; 91
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 7d       	andi	r24, 0xDF	; 223
    1574:	8c 93       	st	X, r24
		break;
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <EXINT_Trigger>:
/************************************Control function*****************************/
void EXINT_Trigger(const EXINT_SRC_t EXINT_SRC, const EXINT_TRIGGER_t EDGE)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2a 97       	sbiw	r28, 0x0a	; 10
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXINT_SRC){
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3a 87       	std	Y+10, r19	; 0x0a
    15a2:	29 87       	std	Y+9, r18	; 0x09
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <EXINT_Trigger+0x2e>
    15ae:	66 c0       	rjmp	.+204    	; 0x167c <EXINT_Trigger+0xfa>
    15b0:	29 85       	ldd	r18, Y+9	; 0x09
    15b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <EXINT_Trigger+0x3a>
    15ba:	bb c0       	rjmp	.+374    	; 0x1732 <EXINT_Trigger+0x1b0>
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <EXINT_Trigger+0x44>
    15c4:	dd c0       	rjmp	.+442    	; 0x1780 <EXINT_Trigger+0x1fe>
		case EXINT0:
		switch(EDGE){
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	38 87       	std	Y+8, r19	; 0x08
    15ce:	2f 83       	std	Y+7, r18	; 0x07
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	21 f1       	breq	.+72     	; 0x1622 <EXINT_Trigger+0xa0>
    15da:	2f 81       	ldd	r18, Y+7	; 0x07
    15dc:	38 85       	ldd	r19, Y+8	; 0x08
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <EXINT_Trigger+0x6c>
    15e4:	8f 81       	ldd	r24, Y+7	; 0x07
    15e6:	98 85       	ldd	r25, Y+8	; 0x08
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <EXINT_Trigger+0x82>
    15ec:	c9 c0       	rjmp	.+402    	; 0x1780 <EXINT_Trigger+0x1fe>
    15ee:	2f 81       	ldd	r18, Y+7	; 0x07
    15f0:	38 85       	ldd	r19, Y+8	; 0x08
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	21 f1       	breq	.+72     	; 0x1640 <EXINT_Trigger+0xbe>
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	71 f1       	breq	.+92     	; 0x165e <EXINT_Trigger+0xdc>
    1602:	be c0       	rjmp	.+380    	; 0x1780 <EXINT_Trigger+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    1604:	a5 e5       	ldi	r26, 0x55	; 85
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e5       	ldi	r30, 0x55	; 85
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8e 7f       	andi	r24, 0xFE	; 254
    1610:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1612:	a5 e5       	ldi	r26, 0x55	; 85
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e5       	ldi	r30, 0x55	; 85
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8d 7f       	andi	r24, 0xFD	; 253
    161e:	8c 93       	st	X, r24
    1620:	af c0       	rjmp	.+350    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1622:	a5 e5       	ldi	r26, 0x55	; 85
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e5       	ldi	r30, 0x55	; 85
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1630:	a5 e5       	ldi	r26, 0x55	; 85
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e5       	ldi	r30, 0x55	; 85
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8d 7f       	andi	r24, 0xFD	; 253
    163c:	8c 93       	st	X, r24
    163e:	a0 c0       	rjmp	.+320    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    1640:	a5 e5       	ldi	r26, 0x55	; 85
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e5       	ldi	r30, 0x55	; 85
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8e 7f       	andi	r24, 0xFE	; 254
    164c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    164e:	a5 e5       	ldi	r26, 0x55	; 85
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e5       	ldi	r30, 0x55	; 85
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	8c 93       	st	X, r24
    165c:	91 c0       	rjmp	.+290    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    165e:	a5 e5       	ldi	r26, 0x55	; 85
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e5       	ldi	r30, 0x55	; 85
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    166c:	a5 e5       	ldi	r26, 0x55	; 85
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e5 e5       	ldi	r30, 0x55	; 85
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
    167a:	82 c0       	rjmp	.+260    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;

		}
		break;
		case EXINT1:
		switch(EDGE){
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3e 83       	std	Y+6, r19	; 0x06
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	21 f1       	breq	.+72     	; 0x16d8 <EXINT_Trigger+0x156>
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	3e 81       	ldd	r19, Y+6	; 0x06
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <EXINT_Trigger+0x122>
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 f0       	breq	.+24     	; 0x16ba <EXINT_Trigger+0x138>
    16a2:	6e c0       	rjmp	.+220    	; 0x1780 <EXINT_Trigger+0x1fe>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	21 f1       	breq	.+72     	; 0x16f6 <EXINT_Trigger+0x174>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	71 f1       	breq	.+92     	; 0x1714 <EXINT_Trigger+0x192>
    16b8:	63 c0       	rjmp	.+198    	; 0x1780 <EXINT_Trigger+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    16ba:	a5 e5       	ldi	r26, 0x55	; 85
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e5       	ldi	r30, 0x55	; 85
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8b 7f       	andi	r24, 0xFB	; 251
    16c6:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    16c8:	a5 e5       	ldi	r26, 0x55	; 85
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e5       	ldi	r30, 0x55	; 85
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	8c 93       	st	X, r24
    16d6:	54 c0       	rjmp	.+168    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
    16d8:	a5 e5       	ldi	r26, 0x55	; 85
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e5       	ldi	r30, 0x55	; 85
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    16e6:	a5 e5       	ldi	r26, 0x55	; 85
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e5       	ldi	r30, 0x55	; 85
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	8c 93       	st	X, r24
    16f4:	45 c0       	rjmp	.+138    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
    16f6:	a5 e5       	ldi	r26, 0x55	; 85
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e5       	ldi	r30, 0x55	; 85
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8b 7f       	andi	r24, 0xFB	; 251
    1702:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1704:	a5 e5       	ldi	r26, 0x55	; 85
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e5       	ldi	r30, 0x55	; 85
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 60       	ori	r24, 0x08	; 8
    1710:	8c 93       	st	X, r24
    1712:	36 c0       	rjmp	.+108    	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    1714:	a5 e5       	ldi	r26, 0x55	; 85
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e5       	ldi	r30, 0x55	; 85
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	84 60       	ori	r24, 0x04	; 4
    1720:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    1722:	a5 e5       	ldi	r26, 0x55	; 85
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e5       	ldi	r30, 0x55	; 85
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 60       	ori	r24, 0x08	; 8
    172e:	8c 93       	st	X, r24
    1730:	27 c0       	rjmp	.+78     	; 0x1780 <EXINT_Trigger+0x1fe>
			break;

		}
		break;
		case EXINT2:
		switch(EDGE){
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3c 83       	std	Y+4, r19	; 0x04
    173a:	2b 83       	std	Y+3, r18	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	91 05       	cpc	r25, r1
    1744:	31 f0       	breq	.+12     	; 0x1752 <EXINT_Trigger+0x1d0>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	23 30       	cpi	r18, 0x03	; 3
    174c:	31 05       	cpc	r19, r1
    174e:	49 f0       	breq	.+18     	; 0x1762 <EXINT_Trigger+0x1e0>
    1750:	10 c0       	rjmp	.+32     	; 0x1772 <EXINT_Trigger+0x1f0>
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
    1752:	a4 e5       	ldi	r26, 0x54	; 84
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e4 e5       	ldi	r30, 0x54	; 84
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 7b       	andi	r24, 0xBF	; 191
    175e:	8c 93       	st	X, r24
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    1762:	a4 e5       	ldi	r26, 0x54	; 84
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e4 e5       	ldi	r30, 0x54	; 84
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	8c 93       	st	X, r24
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <EXINT_Trigger+0x1fe>
			break;
			default:
			CLEAR_BIT(MCUCSR,ISC2);
    1772:	a4 e5       	ldi	r26, 0x54	; 84
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e4 e5       	ldi	r30, 0x54	; 84
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8f 7b       	andi	r24, 0xBF	; 191
    177e:	8c 93       	st	X, r24
		}
		break;
	}
}
    1780:	2a 96       	adiw	r28, 0x0a	; 10
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <KEYPAD_Init>:
/****************************************************************************/
#ifndef KEYPAD_H
#include "KEYPAD.h"
/****************************************************************************/
void KEYPAD_Init(void){
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <KEYPAD_Init+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <KEYPAD_Init+0x8>
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	UINT8_t Idx;
	KEYPAD_COL_t KYPAD_Col[KEYPAD_MAX_COLS] = {KEYPAD_COL1, KEYPAD_COL2, KEYPAD_COL3};
    17a0:	1a 82       	std	Y+2, r1	; 0x02
    17a2:	1b 82       	std	Y+3, r1	; 0x03
    17a4:	1c 82       	std	Y+4, r1	; 0x04
    17a6:	1d 82       	std	Y+5, r1	; 0x05
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	8c 83       	std	Y+4, r24	; 0x04
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	8d 83       	std	Y+5, r24	; 0x05
#endif
	for(Idx = 0; Idx < KEYPAD_MAX_COLS; Idx++){
    17b4:	19 82       	std	Y+1, r1	; 0x01
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <KEYPAD_Init+0x44>
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Idx], DIO_PIN_STATE_HIGH);
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	ce 01       	movw	r24, r28
    17c0:	02 96       	adiw	r24, 0x02	; 2
    17c2:	fc 01       	movw	r30, r24
    17c4:	e2 0f       	add	r30, r18
    17c6:	f3 1f       	adc	r31, r19
    17c8:	80 81       	ld	r24, Z
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	UINT8_t Idx;
	KEYPAD_COL_t KYPAD_Col[KEYPAD_MAX_COLS] = {KEYPAD_COL1, KEYPAD_COL2, KEYPAD_COL3};
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
#endif
	for(Idx = 0; Idx < KEYPAD_MAX_COLS; Idx++){
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	70 f3       	brcs	.-36     	; 0x17b8 <KEYPAD_Init+0x26>
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Idx], DIO_PIN_STATE_HIGH);
	}
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <KEYPAD_Read>:
/****************************************************************************/
UINT8_t KEYPAD_Read(void){
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	a1 97       	sbiw	r28, 0x21	; 33
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
	UINT8_t Col_Idx, Row_Idx, Key_Pressed = NO_KEY;
    1800:	86 e1       	ldi	r24, 0x16	; 22
    1802:	89 83       	std	Y+1, r24	; 0x01
	KEYPAD_COL_t KYPAD_Col[KEYPAD_MAX_COLS] = {KEYPAD_COL1, KEYPAD_COL2, KEYPAD_COL3};
    1804:	1c 82       	std	Y+4, r1	; 0x04
    1806:	1d 82       	std	Y+5, r1	; 0x05
    1808:	1e 82       	std	Y+6, r1	; 0x06
    180a:	1f 82       	std	Y+7, r1	; 0x07
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	8e 83       	std	Y+6, r24	; 0x06
	KEYPAD_ROW_t KEYPAD_Row[KEYPAD_MAX_ROWS] = {KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3};
    1814:	18 86       	std	Y+8, r1	; 0x08
    1816:	19 86       	std	Y+9, r1	; 0x09
    1818:	1a 86       	std	Y+10, r1	; 0x0a
    181a:	1b 86       	std	Y+11, r1	; 0x0b
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	88 87       	std	Y+8, r24	; 0x08
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	89 87       	std	Y+9, r24	; 0x09
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	8a 87       	std	Y+10, r24	; 0x0a
	UINT8_t Keypad[KEYPAD_MAX_ROWS][KEYPAD_MAX_COLS] = KEYPAD_VALUES;
    1828:	ce 01       	movw	r24, r28
    182a:	0c 96       	adiw	r24, 0x0c	; 12
    182c:	9e 8f       	std	Y+30, r25	; 0x1e
    182e:	8d 8f       	std	Y+29, r24	; 0x1d
    1830:	e2 eb       	ldi	r30, 0xB2	; 178
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	f8 a3       	std	Y+32, r31	; 0x20
    1836:	ef 8f       	std	Y+31, r30	; 0x1f
    1838:	f0 e1       	ldi	r31, 0x10	; 16
    183a:	f9 a3       	std	Y+33, r31	; 0x21
    183c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    183e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1840:	00 80       	ld	r0, Z
    1842:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1844:	98 a1       	ldd	r25, Y+32	; 0x20
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	98 a3       	std	Y+32, r25	; 0x20
    184a:	8f 8f       	std	Y+31, r24	; 0x1f
    184c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    184e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1850:	00 82       	st	Z, r0
    1852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	9e 8f       	std	Y+30, r25	; 0x1e
    185a:	8d 8f       	std	Y+29, r24	; 0x1d
    185c:	99 a1       	ldd	r25, Y+33	; 0x21
    185e:	91 50       	subi	r25, 0x01	; 1
    1860:	99 a3       	std	Y+33, r25	; 0x21
    1862:	e9 a1       	ldd	r30, Y+33	; 0x21
    1864:	ee 23       	and	r30, r30
    1866:	51 f7       	brne	.-44     	; 0x183c <KEYPAD_Read+0x50>
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	8f 83       	std	Y+7, r24	; 0x07
	KEYPAD_Row[3] = KEYPAD_ROW4;
    186c:	87 e0       	ldi	r24, 0x07	; 7
    186e:	8b 87       	std	Y+11, r24	; 0x0b
#endif
	for(Col_Idx = 0; Col_Idx < KEYPAD_MAX_COLS; Col_Idx++){
    1870:	1b 82       	std	Y+3, r1	; 0x03
    1872:	61 c0       	rjmp	.+194    	; 0x1936 <KEYPAD_Read+0x14a>
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_LOW);
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	ce 01       	movw	r24, r28
    187c:	04 96       	adiw	r24, 0x04	; 4
    187e:	fc 01       	movw	r30, r24
    1880:	e2 0f       	add	r30, r18
    1882:	f3 1f       	adc	r31, r19
    1884:	80 81       	ld	r24, Z
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
		for(Row_Idx = 0; Row_Idx < KEYPAD_MAX_ROWS; Row_Idx++){
    188c:	1a 82       	std	Y+2, r1	; 0x02
    188e:	40 c0       	rjmp	.+128    	; 0x1910 <KEYPAD_Read+0x124>
			if(DIO_PIN_STATE_LOW == DIO_READ_PIN_VALUE(KEYPAD_Row[Row_Idx])){
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	ce 01       	movw	r24, r28
    1898:	08 96       	adiw	r24, 0x08	; 8
    189a:	fc 01       	movw	r30, r24
    189c:	e2 0f       	add	r30, r18
    189e:	f3 1f       	adc	r31, r19
    18a0:	80 81       	ld	r24, Z
    18a2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <DIO_READ_PIN_VALUE>
    18a6:	88 23       	and	r24, r24
    18a8:	81 f5       	brne	.+96     	; 0x190a <KEYPAD_Read+0x11e>
				Key_Pressed = Keypad[Row_Idx][Col_Idx];
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	48 2f       	mov	r20, r24
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	84 0f       	add	r24, r20
    18c8:	95 1f       	adc	r25, r21
    18ca:	fc 01       	movw	r30, r24
    18cc:	3b 96       	adiw	r30, 0x0b	; 11
    18ce:	80 81       	ld	r24, Z
    18d0:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_PIN_STATE_LOW == DIO_READ_PIN_VALUE(KEYPAD_Row[Row_Idx]));
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	08 96       	adiw	r24, 0x08	; 8
    18dc:	fc 01       	movw	r30, r24
    18de:	e2 0f       	add	r30, r18
    18e0:	f3 1f       	adc	r31, r19
    18e2:	80 81       	ld	r24, Z
    18e4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <DIO_READ_PIN_VALUE>
    18e8:	88 23       	and	r24, r24
    18ea:	99 f3       	breq	.-26     	; 0x18d2 <KEYPAD_Read+0xe6>
				DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	ce 01       	movw	r24, r28
    18f4:	04 96       	adiw	r24, 0x04	; 4
    18f6:	fc 01       	movw	r30, r24
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	80 81       	ld	r24, Z
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
				return Key_Pressed;
    1904:	f9 81       	ldd	r31, Y+1	; 0x01
    1906:	fc 8f       	std	Y+28, r31	; 0x1c
    1908:	1c c0       	rjmp	.+56     	; 0x1942 <KEYPAD_Read+0x156>
	KYPAD_Col[3] = KEYPAD_COL4;
	KEYPAD_Row[3] = KEYPAD_ROW4;
#endif
	for(Col_Idx = 0; Col_Idx < KEYPAD_MAX_COLS; Col_Idx++){
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_LOW);
		for(Row_Idx = 0; Row_Idx < KEYPAD_MAX_ROWS; Row_Idx++){
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	8f 5f       	subi	r24, 0xFF	; 255
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	08 f4       	brcc	.+2      	; 0x1918 <KEYPAD_Read+0x12c>
    1916:	bc cf       	rjmp	.-136    	; 0x1890 <KEYPAD_Read+0xa4>
				while(DIO_PIN_STATE_LOW == DIO_READ_PIN_VALUE(KEYPAD_Row[Row_Idx]));
				DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
				return Key_Pressed;
			}
		}
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	ce 01       	movw	r24, r28
    1920:	04 96       	adiw	r24, 0x04	; 4
    1922:	fc 01       	movw	r30, r24
    1924:	e2 0f       	add	r30, r18
    1926:	f3 1f       	adc	r31, r19
    1928:	80 81       	ld	r24, Z
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	UINT8_t Keypad[KEYPAD_MAX_ROWS][KEYPAD_MAX_COLS] = KEYPAD_VALUES;
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
	KEYPAD_Row[3] = KEYPAD_ROW4;
#endif
	for(Col_Idx = 0; Col_Idx < KEYPAD_MAX_COLS; Col_Idx++){
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	8b 83       	std	Y+3, r24	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	08 f4       	brcc	.+2      	; 0x193e <KEYPAD_Read+0x152>
    193c:	9b cf       	rjmp	.-202    	; 0x1874 <KEYPAD_Read+0x88>
				return Key_Pressed;
			}
		}
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
	}
	return Key_Pressed;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	8c 8f       	std	Y+28, r24	; 0x1c
    1942:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    1944:	a1 96       	adiw	r28, 0x21	; 33
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LCD_Init>:
static UINT8_t Configuration_Process = STILL, Address_Counter;
/*************************************************************************/
static UINT16_t Reverse_Number(UINT16_t Number); /* Max Number 65535 */
static UINT16_t Get_Number_Length(UINT16_t Number); /* Max Length 5 Digits */
/*************************************************************************/
void LCD_Init(void) {
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	e8 97       	sbiw	r28, 0x38	; 56
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
	/* Inite MCU Pins Direction As Output For LCD */

	/* Inite MCU Pins vlaue as 0 for LCD */
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);     // E should be high
    196a:	8c e1       	ldi	r24, 0x1C	; 28
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
    1972:	8d e1       	ldi	r24, 0x1D	; 29
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
    197a:	8e e1       	ldi	r24, 0x1E	; 30
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D4
    1982:	88 e1       	ldi	r24, 0x18	; 24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D5
    198a:	89 e1       	ldi	r24, 0x19	; 25
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D6
    1992:	8a e1       	ldi	r24, 0x1A	; 26
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D7
    199a:	8b e1       	ldi	r24, 0x1B	; 27
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 ef       	ldi	r26, 0xF0	; 240
    19a8:	b1 e4       	ldi	r27, 0x41	; 65
    19aa:	8d ab       	std	Y+53, r24	; 0x35
    19ac:	9e ab       	std	Y+54, r25	; 0x36
    19ae:	af ab       	std	Y+55, r26	; 0x37
    19b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6d a9       	ldd	r22, Y+53	; 0x35
    19b4:	7e a9       	ldd	r23, Y+54	; 0x36
    19b6:	8f a9       	ldd	r24, Y+55	; 0x37
    19b8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	55 e4       	ldi	r21, 0x45	; 69
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	89 ab       	std	Y+49, r24	; 0x31
    19cc:	9a ab       	std	Y+50, r25	; 0x32
    19ce:	ab ab       	std	Y+51, r26	; 0x33
    19d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19d2:	69 a9       	ldd	r22, Y+49	; 0x31
    19d4:	7a a9       	ldd	r23, Y+50	; 0x32
    19d6:	8b a9       	ldd	r24, Y+51	; 0x33
    19d8:	9c a9       	ldd	r25, Y+52	; 0x34
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_Init+0x9e>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	98 ab       	std	Y+48, r25	; 0x30
    19f0:	8f a7       	std	Y+47, r24	; 0x2f
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_Init+0x11c>
	else if (__tmp > 65535)
    19f4:	69 a9       	ldd	r22, Y+49	; 0x31
    19f6:	7a a9       	ldd	r23, Y+50	; 0x32
    19f8:	8b a9       	ldd	r24, Y+51	; 0x33
    19fa:	9c a9       	ldd	r25, Y+52	; 0x34
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_Init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a10:	8f a9       	ldd	r24, Y+55	; 0x37
    1a12:	98 ad       	ldd	r25, Y+56	; 0x38
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_Init+0xfe>
    1a36:	80 e9       	ldi	r24, 0x90	; 144
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	9e a7       	std	Y+46, r25	; 0x2e
    1a3c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_Init+0xec>
    1a46:	9e a7       	std	Y+46, r25	; 0x2e
    1a48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	98 ab       	std	Y+48, r25	; 0x30
    1a52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a56:	98 a9       	ldd	r25, Y+48	; 0x30
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_Init+0xe0>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_Init+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
    1a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a74:	98 a9       	ldd	r25, Y+48	; 0x30
    1a76:	9c a7       	std	Y+44, r25	; 0x2c
    1a78:	8b a7       	std	Y+43, r24	; 0x2b
    1a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_Init+0x128>
    1a82:	9c a7       	std	Y+44, r25	; 0x2c
    1a84:	8b a7       	std	Y+43, r24	; 0x2b

	/* LCD 4 Wires Interfacing */
	_delay_ms(30); // LCD Power Rises Delay
	/* LCD Function Set */
	LCD_Send_Command(0X20);
    1a86:	80 e2       	ldi	r24, 0x20	; 32
    1a88:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	LCD_Send_Command(0X20);
    1a8c:	80 e2       	ldi	r24, 0x20	; 32
    1a8e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	LCD_Send_Command(0X80); // LCD 2 Lines, 5 * 7 dot characters
    1a92:	80 e8       	ldi	r24, 0x80	; 128
    1a94:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e2       	ldi	r26, 0x20	; 32
    1a9e:	b1 e4       	ldi	r27, 0x41	; 65
    1aa0:	8f a3       	std	Y+39, r24	; 0x27
    1aa2:	98 a7       	std	Y+40, r25	; 0x28
    1aa4:	a9 a7       	std	Y+41, r26	; 0x29
    1aa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    1aac:	89 a5       	ldd	r24, Y+41	; 0x29
    1aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a e7       	ldi	r20, 0x7A	; 122
    1ab6:	55 e4       	ldi	r21, 0x45	; 69
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8b a3       	std	Y+35, r24	; 0x23
    1ac2:	9c a3       	std	Y+36, r25	; 0x24
    1ac4:	ad a3       	std	Y+37, r26	; 0x25
    1ac6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ac8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aca:	7c a1       	ldd	r23, Y+36	; 0x24
    1acc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ace:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_Init+0x194>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9a a3       	std	Y+34, r25	; 0x22
    1ae6:	89 a3       	std	Y+33, r24	; 0x21
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_Init+0x212>
	else if (__tmp > 65535)
    1aea:	6b a1       	ldd	r22, Y+35	; 0x23
    1aec:	7c a1       	ldd	r23, Y+36	; 0x24
    1aee:	8d a1       	ldd	r24, Y+37	; 0x25
    1af0:	9e a1       	ldd	r25, Y+38	; 0x26
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_Init+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6f a1       	ldd	r22, Y+39	; 0x27
    1b04:	78 a5       	ldd	r23, Y+40	; 0x28
    1b06:	89 a5       	ldd	r24, Y+41	; 0x29
    1b08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_Init+0x1f4>
    1b2c:	80 e9       	ldi	r24, 0x90	; 144
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	98 a3       	std	Y+32, r25	; 0x20
    1b32:	8f 8f       	std	Y+31, r24	; 0x1f
    1b34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b36:	98 a1       	ldd	r25, Y+32	; 0x20
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_Init+0x1e2>
    1b3c:	98 a3       	std	Y+32, r25	; 0x20
    1b3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	89 a1       	ldd	r24, Y+33	; 0x21
    1b42:	9a a1       	ldd	r25, Y+34	; 0x22
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_Init+0x1d6>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <LCD_Init+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6b a1       	ldd	r22, Y+35	; 0x23
    1b56:	7c a1       	ldd	r23, Y+36	; 0x24
    1b58:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9a a3       	std	Y+34, r25	; 0x22
    1b66:	89 a3       	std	Y+33, r24	; 0x21
    1b68:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_Init+0x21e>
    1b78:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);           // For Latching
	/* Display on/off Control */
	LCD_Send_Command(0X00);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	LCD_Send_Command(0XC0); // Display on / Cursor Off / Blinking off
    1b82:	80 ec       	ldi	r24, 0xC0	; 192
    1b84:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e2       	ldi	r26, 0x20	; 32
    1b8e:	b1 e4       	ldi	r27, 0x41	; 65
    1b90:	89 8f       	std	Y+25, r24	; 0x19
    1b92:	9a 8f       	std	Y+26, r25	; 0x1a
    1b94:	ab 8f       	std	Y+27, r26	; 0x1b
    1b96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	55 e4       	ldi	r21, 0x45	; 69
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8d 8b       	std	Y+21, r24	; 0x15
    1bb2:	9e 8b       	std	Y+22, r25	; 0x16
    1bb4:	af 8b       	std	Y+23, r26	; 0x17
    1bb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_Init+0x284>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_Init+0x302>
	else if (__tmp > 65535)
    1bda:	6d 89       	ldd	r22, Y+21	; 0x15
    1bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bde:	8f 89       	ldd	r24, Y+23	; 0x17
    1be0:	98 8d       	ldd	r25, Y+24	; 0x18
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_Init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_Init+0x2e4>
    1c1c:	80 e9       	ldi	r24, 0x90	; 144
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	89 8b       	std	Y+17, r24	; 0x11
    1c24:	89 89       	ldd	r24, Y+17	; 0x11
    1c26:	9a 89       	ldd	r25, Y+18	; 0x12
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_Init+0x2d2>
    1c2c:	9a 8b       	std	Y+18, r25	; 0x12
    1c2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_Init+0x2c6>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <LCD_Init+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 8b       	std	Y+20, r25	; 0x14
    1c56:	8b 8b       	std	Y+19, r24	; 0x13
    1c58:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5c:	98 8b       	std	Y+16, r25	; 0x10
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
    1c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c62:	98 89       	ldd	r25, Y+16	; 0x10
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_Init+0x30e>
    1c68:	98 8b       	std	Y+16, r25	; 0x10
    1c6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10); // For Latching
	/* Clear Dispaly */
	LCD_Send_Command(0X00);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	LCD_Send_Command(0X10);
    1c72:	80 e1       	ldi	r24, 0x10	; 16
    1c74:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e2       	ldi	r26, 0x20	; 32
    1c7e:	b1 e4       	ldi	r27, 0x41	; 65
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a e7       	ldi	r20, 0x7A	; 122
    1c96:	55 e4       	ldi	r21, 0x45	; 69
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_Init+0x374>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_Init+0x3f2>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_Init+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_Init+0x3d4>
    1d0c:	80 e9       	ldi	r24, 0x90	; 144
    1d0e:	91 e0       	ldi	r25, 0x01	; 1
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_Init+0x3c2>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_Init+0x3b6>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_Init+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_Init+0x3fe>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); // For Latching
	Configuration_Process = ENDED;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 d0 00 	sts	0x00D0, r24
}
    1d62:	e8 96       	adiw	r28, 0x38	; 56
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <LCD_Send_Command>:
/*************************************************************************/
void LCD_Send_Command(const UINT8_t CMD) {
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	ab 97       	sbiw	r28, 0x2b	; 43
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	8b a7       	std	Y+43, r24	; 0x2b
	// Write operation
	DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
    1d8a:	8d e1       	ldi	r24, 0x1D	; 29
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	// Command Mode
	DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
    1d92:	8e e1       	ldi	r24, 0x1E	; 30
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	// SEND MSB
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    1d9a:	8c e1       	ldi	r24, 0x1C	; 28
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 4));   //  D4
    1da2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da4:	82 95       	swap	r24
    1da6:	8f 70       	andi	r24, 0x0F	; 15
    1da8:	98 2f       	mov	r25, r24
    1daa:	91 70       	andi	r25, 0x01	; 1
    1dac:	88 e1       	ldi	r24, 0x18	; 24
    1dae:	69 2f       	mov	r22, r25
    1db0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 5));   //  D5
    1db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db6:	82 95       	swap	r24
    1db8:	86 95       	lsr	r24
    1dba:	87 70       	andi	r24, 0x07	; 7
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	91 70       	andi	r25, 0x01	; 1
    1dc0:	89 e1       	ldi	r24, 0x19	; 25
    1dc2:	69 2f       	mov	r22, r25
    1dc4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 6));   //  D6
    1dc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dca:	82 95       	swap	r24
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	83 70       	andi	r24, 0x03	; 3
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	91 70       	andi	r25, 0x01	; 1
    1dd6:	8a e1       	ldi	r24, 0x1A	; 26
    1dd8:	69 2f       	mov	r22, r25
    1dda:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 7));   //  D7
    1dde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de0:	98 2f       	mov	r25, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	99 27       	eor	r25, r25
    1de6:	99 1f       	adc	r25, r25
    1de8:	8b e1       	ldi	r24, 0x1B	; 27
    1dea:	69 2f       	mov	r22, r25
    1dec:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
    1df0:	8c e1       	ldi	r24, 0x1C	; 28
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e2       	ldi	r26, 0x20	; 32
    1dfe:	b1 e4       	ldi	r27, 0x41	; 65
    1e00:	8f a3       	std	Y+39, r24	; 0x27
    1e02:	98 a7       	std	Y+40, r25	; 0x28
    1e04:	a9 a7       	std	Y+41, r26	; 0x29
    1e06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	55 e4       	ldi	r21, 0x45	; 69
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8b a3       	std	Y+35, r24	; 0x23
    1e22:	9c a3       	std	Y+36, r25	; 0x24
    1e24:	ad a3       	std	Y+37, r26	; 0x25
    1e26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e28:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <LCD_Send_Command+0xd6>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <LCD_Send_Command+0x154>
	else if (__tmp > 65535)
    1e4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e50:	9e a1       	ldd	r25, Y+38	; 0x26
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <LCD_Send_Command+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6f a1       	ldd	r22, Y+39	; 0x27
    1e64:	78 a5       	ldd	r23, Y+40	; 0x28
    1e66:	89 a5       	ldd	r24, Y+41	; 0x29
    1e68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9a a3       	std	Y+34, r25	; 0x22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <LCD_Send_Command+0x136>
    1e8c:	80 e9       	ldi	r24, 0x90	; 144
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	98 a3       	std	Y+32, r25	; 0x20
    1e92:	8f 8f       	std	Y+31, r24	; 0x1f
    1e94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e96:	98 a1       	ldd	r25, Y+32	; 0x20
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_Send_Command+0x124>
    1e9c:	98 a3       	std	Y+32, r25	; 0x20
    1e9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9a a3       	std	Y+34, r25	; 0x22
    1ea8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    1eac:	9a a1       	ldd	r25, Y+34	; 0x22
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <LCD_Send_Command+0x118>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <LCD_Send_Command+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9a a3       	std	Y+34, r25	; 0x22
    1ec6:	89 a3       	std	Y+33, r24	; 0x21
    1ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ecc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_Send_Command+0x160>
    1ed8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eda:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(10);
	/* Latch data */
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    1edc:	8c e1       	ldi	r24, 0x1C	; 28
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	if (Configuration_Process == ENDED) {
    1ee4:	80 91 d0 00 	lds	r24, 0x00D0
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	09 f0       	breq	.+2      	; 0x1eee <LCD_Send_Command+0x17a>
    1eec:	98 c0       	rjmp	.+304    	; 0x201e <LCD_Send_Command+0x2aa>
		// SEND LSB
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 0));   //  D4
    1eee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	91 70       	andi	r25, 0x01	; 1
    1ef4:	88 e1       	ldi	r24, 0x18	; 24
    1ef6:	69 2f       	mov	r22, r25
    1ef8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 1));   //  D5
    1efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1efe:	86 95       	lsr	r24
    1f00:	98 2f       	mov	r25, r24
    1f02:	91 70       	andi	r25, 0x01	; 1
    1f04:	89 e1       	ldi	r24, 0x19	; 25
    1f06:	69 2f       	mov	r22, r25
    1f08:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 2));   //  D6
    1f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f0e:	86 95       	lsr	r24
    1f10:	86 95       	lsr	r24
    1f12:	98 2f       	mov	r25, r24
    1f14:	91 70       	andi	r25, 0x01	; 1
    1f16:	8a e1       	ldi	r24, 0x1A	; 26
    1f18:	69 2f       	mov	r22, r25
    1f1a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 3));   //  D7
    1f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f20:	86 95       	lsr	r24
    1f22:	86 95       	lsr	r24
    1f24:	86 95       	lsr	r24
    1f26:	98 2f       	mov	r25, r24
    1f28:	91 70       	andi	r25, 0x01	; 1
    1f2a:	8b e1       	ldi	r24, 0x1B	; 27
    1f2c:	69 2f       	mov	r22, r25
    1f2e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
    1f32:	8c e1       	ldi	r24, 0x1C	; 28
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e2       	ldi	r26, 0x20	; 32
    1f40:	b1 e4       	ldi	r27, 0x41	; 65
    1f42:	89 8f       	std	Y+25, r24	; 0x19
    1f44:	9a 8f       	std	Y+26, r25	; 0x1a
    1f46:	ab 8f       	std	Y+27, r26	; 0x1b
    1f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	55 e4       	ldi	r21, 0x45	; 69
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8d 8b       	std	Y+21, r24	; 0x15
    1f64:	9e 8b       	std	Y+22, r25	; 0x16
    1f66:	af 8b       	std	Y+23, r26	; 0x17
    1f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f70:	98 8d       	ldd	r25, Y+24	; 0x18
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_Send_Command+0x218>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_Send_Command+0x296>
	else if (__tmp > 65535)
    1f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f90:	8f 89       	ldd	r24, Y+23	; 0x17
    1f92:	98 8d       	ldd	r25, Y+24	; 0x18
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_Send_Command+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9c 8b       	std	Y+20, r25	; 0x14
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_Send_Command+0x278>
    1fce:	80 e9       	ldi	r24, 0x90	; 144
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	9a 8b       	std	Y+18, r25	; 0x12
    1fd4:	89 8b       	std	Y+17, r24	; 0x11
    1fd6:	89 89       	ldd	r24, Y+17	; 0x11
    1fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_Send_Command+0x266>
    1fde:	9a 8b       	std	Y+18, r25	; 0x12
    1fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_Send_Command+0x25a>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_Send_Command+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	8b 89       	ldd	r24, Y+19	; 0x13
    200c:	9c 89       	ldd	r25, Y+20	; 0x14
    200e:	98 8b       	std	Y+16, r25	; 0x10
    2010:	8f 87       	std	Y+15, r24	; 0x0f
    2012:	8f 85       	ldd	r24, Y+15	; 0x0f
    2014:	98 89       	ldd	r25, Y+16	; 0x10
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_Send_Command+0x2a2>
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e2       	ldi	r26, 0x20	; 32
    2024:	b1 e4       	ldi	r27, 0x41	; 65
    2026:	8b 87       	std	Y+11, r24	; 0x0b
    2028:	9c 87       	std	Y+12, r25	; 0x0c
    202a:	ad 87       	std	Y+13, r26	; 0x0d
    202c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2030:	7c 85       	ldd	r23, Y+12	; 0x0c
    2032:	8d 85       	ldd	r24, Y+13	; 0x0d
    2034:	9e 85       	ldd	r25, Y+14	; 0x0e
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	55 e4       	ldi	r21, 0x45	; 69
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8f 83       	std	Y+7, r24	; 0x07
    2048:	98 87       	std	Y+8, r25	; 0x08
    204a:	a9 87       	std	Y+9, r26	; 0x09
    204c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2062:	88 23       	and	r24, r24
    2064:	2c f4       	brge	.+10     	; 0x2070 <LCD_Send_Command+0x2fc>
		__ticks = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	3f c0       	rjmp	.+126    	; 0x20ee <LCD_Send_Command+0x37a>
	else if (__tmp > 65535)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	4c f5       	brge	.+82     	; 0x20da <LCD_Send_Command+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2088:	6b 85       	ldd	r22, Y+11	; 0x0b
    208a:	7c 85       	ldd	r23, Y+12	; 0x0c
    208c:	8d 85       	ldd	r24, Y+13	; 0x0d
    208e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <LCD_Send_Command+0x35c>
    20b2:	80 e9       	ldi	r24, 0x90	; 144
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <LCD_Send_Command+0x34a>
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	69 f7       	brne	.-38     	; 0x20b2 <LCD_Send_Command+0x33e>
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <LCD_Send_Command+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_Send_Command+0x386>
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);
	}
	// for latching
	_delay_ms(10);
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    2102:	8c e1       	ldi	r24, 0x1C	; 28
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
}
    210a:	ab 96       	adiw	r28, 0x2b	; 43
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_Disp_Str>:
/*************************************************************************/
void LCD_Disp_Str(const UINT8_t* Data) {
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_Disp_Str+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	0b c0       	rjmp	.+22     	; 0x2142 <LCD_Disp_Str+0x26>

	while (*Data != '\0') {
		LCD_Write_Char(*Data++);
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	20 81       	ld	r18, Z
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	82 2f       	mov	r24, r18
    213e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_Write_Char>
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
}
/*************************************************************************/
void LCD_Disp_Str(const UINT8_t* Data) {

	while (*Data != '\0') {
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	80 81       	ld	r24, Z
    2148:	88 23       	and	r24, r24
    214a:	81 f7       	brne	.-32     	; 0x212c <LCD_Disp_Str+0x10>
		LCD_Write_Char(*Data++);
	}

}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <LCD_Jumb_ToAndWrite>:
/*************************************************************************/
void LCD_Jumb_ToAndWrite(const UINT8_t* Data,
						const LCD_ROW_ID_t ROW,
						const LCD_COL_ID_t COL)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <LCD_Jumb_ToAndWrite+0x6>
    215c:	00 d0       	rcall	.+0      	; 0x215e <LCD_Jumb_ToAndWrite+0x8>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	6b 83       	std	Y+3, r22	; 0x03
    2168:	4c 83       	std	Y+4, r20	; 0x04
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS) {
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	58 f4       	brcc	.+22     	; 0x2186 <LCD_Jumb_ToAndWrite+0x30>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	80 31       	cpi	r24, 0x10	; 16
    2174:	40 f4       	brcc	.+16     	; 0x2186 <LCD_Jumb_ToAndWrite+0x30>
		LCD_Jumb_To(ROW, COL);
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	6c 81       	ldd	r22, Y+4	; 0x04
    217a:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_Jumb_To>
		LCD_Disp_Str(Data);
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_Disp_Str>
	}

}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <LCD_Jumb_To>:
/*************************************************************************/
void LCD_Jumb_To(const LCD_ROW_ID_t ROW,
				const LCD_COL_ID_t COL)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <LCD_Jumb_To+0x6>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 First Row Start from 0X00
	 Second Row Start From 0X40
	 */
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS) {
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	82 30       	cpi	r24, 0x02	; 2
    21a6:	c8 f4       	brcc	.+50     	; 0x21da <LCD_Jumb_To+0x46>
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	80 31       	cpi	r24, 0x10	; 16
    21ac:	b0 f4       	brcc	.+44     	; 0x21da <LCD_Jumb_To+0x46>
		Address_Counter = ((0X40 * ROW) + COL) | (1 << 7); // To Write into DDRAM;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	00 24       	eor	r0, r0
    21b6:	96 95       	lsr	r25
    21b8:	87 95       	ror	r24
    21ba:	07 94       	ror	r0
    21bc:	96 95       	lsr	r25
    21be:	87 95       	ror	r24
    21c0:	07 94       	ror	r0
    21c2:	98 2f       	mov	r25, r24
    21c4:	80 2d       	mov	r24, r0
    21c6:	98 2f       	mov	r25, r24
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	89 0f       	add	r24, r25
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	80 93 d1 00 	sts	0x00D1, r24
		LCD_Send_Command(Address_Counter);
    21d2:	80 91 d1 00 	lds	r24, 0x00D1
    21d6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	}
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_Write_Char>:
/*************************************************************************/
void LCD_Write_Char(const UINT8_t Character) {
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	ab 97       	sbiw	r28, 0x2b	; 43
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	8b a7       	std	Y+43, r24	; 0x2b

	// Write operation
	DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);     //  R/W
    21fa:	8d e1       	ldi	r24, 0x1D	; 29
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	// Data Mode
	DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //   RS
    2202:	8e e1       	ldi	r24, 0x1E	; 30
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    220a:	8c e1       	ldi	r24, 0x1C	; 28
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	// SEND MSB
	DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 4));   //  D4
    2212:	8b a5       	ldd	r24, Y+43	; 0x2b
    2214:	82 95       	swap	r24
    2216:	8f 70       	andi	r24, 0x0F	; 15
    2218:	98 2f       	mov	r25, r24
    221a:	91 70       	andi	r25, 0x01	; 1
    221c:	88 e1       	ldi	r24, 0x18	; 24
    221e:	69 2f       	mov	r22, r25
    2220:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 5));   //  D5
    2224:	8b a5       	ldd	r24, Y+43	; 0x2b
    2226:	82 95       	swap	r24
    2228:	86 95       	lsr	r24
    222a:	87 70       	andi	r24, 0x07	; 7
    222c:	98 2f       	mov	r25, r24
    222e:	91 70       	andi	r25, 0x01	; 1
    2230:	89 e1       	ldi	r24, 0x19	; 25
    2232:	69 2f       	mov	r22, r25
    2234:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 6));   //  D6
    2238:	8b a5       	ldd	r24, Y+43	; 0x2b
    223a:	82 95       	swap	r24
    223c:	86 95       	lsr	r24
    223e:	86 95       	lsr	r24
    2240:	83 70       	andi	r24, 0x03	; 3
    2242:	98 2f       	mov	r25, r24
    2244:	91 70       	andi	r25, 0x01	; 1
    2246:	8a e1       	ldi	r24, 0x1A	; 26
    2248:	69 2f       	mov	r22, r25
    224a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 7));   //  D7
    224e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2250:	98 2f       	mov	r25, r24
    2252:	99 1f       	adc	r25, r25
    2254:	99 27       	eor	r25, r25
    2256:	99 1f       	adc	r25, r25
    2258:	8b e1       	ldi	r24, 0x1B	; 27
    225a:	69 2f       	mov	r22, r25
    225c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	/* Latch data */
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
    2260:	8c e1       	ldi	r24, 0x1C	; 28
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e2       	ldi	r26, 0x20	; 32
    226e:	b1 e4       	ldi	r27, 0x41	; 65
    2270:	8f a3       	std	Y+39, r24	; 0x27
    2272:	98 a7       	std	Y+40, r25	; 0x28
    2274:	a9 a7       	std	Y+41, r26	; 0x29
    2276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	55 e4       	ldi	r21, 0x45	; 69
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8b a3       	std	Y+35, r24	; 0x23
    2292:	9c a3       	std	Y+36, r25	; 0x24
    2294:	ad a3       	std	Y+37, r26	; 0x25
    2296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2298:	6b a1       	ldd	r22, Y+35	; 0x23
    229a:	7c a1       	ldd	r23, Y+36	; 0x24
    229c:	8d a1       	ldd	r24, Y+37	; 0x25
    229e:	9e a1       	ldd	r25, Y+38	; 0x26
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	2c f4       	brge	.+10     	; 0x22ba <LCD_Write_Char+0xd6>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9a a3       	std	Y+34, r25	; 0x22
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	3f c0       	rjmp	.+126    	; 0x2338 <LCD_Write_Char+0x154>
	else if (__tmp > 65535)
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f5       	brge	.+82     	; 0x2324 <LCD_Write_Char+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d2:	6f a1       	ldd	r22, Y+39	; 0x27
    22d4:	78 a5       	ldd	r23, Y+40	; 0x28
    22d6:	89 a5       	ldd	r24, Y+41	; 0x29
    22d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9a a3       	std	Y+34, r25	; 0x22
    22f8:	89 a3       	std	Y+33, r24	; 0x21
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LCD_Write_Char+0x136>
    22fc:	80 e9       	ldi	r24, 0x90	; 144
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	98 a3       	std	Y+32, r25	; 0x20
    2302:	8f 8f       	std	Y+31, r24	; 0x1f
    2304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2306:	98 a1       	ldd	r25, Y+32	; 0x20
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_Write_Char+0x124>
    230c:	98 a3       	std	Y+32, r25	; 0x20
    230e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2310:	89 a1       	ldd	r24, Y+33	; 0x21
    2312:	9a a1       	ldd	r25, Y+34	; 0x22
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	69 f7       	brne	.-38     	; 0x22fc <LCD_Write_Char+0x118>
    2322:	14 c0       	rjmp	.+40     	; 0x234c <LCD_Write_Char+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2324:	6b a1       	ldd	r22, Y+35	; 0x23
    2326:	7c a1       	ldd	r23, Y+36	; 0x24
    2328:	8d a1       	ldd	r24, Y+37	; 0x25
    232a:	9e a1       	ldd	r25, Y+38	; 0x26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
    2338:	89 a1       	ldd	r24, Y+33	; 0x21
    233a:	9a a1       	ldd	r25, Y+34	; 0x22
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
    2340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_Write_Char+0x160>
    2348:	9e 8f       	std	Y+30, r25	; 0x1e
    234a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    234c:	8c e1       	ldi	r24, 0x1C	; 28
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	// SEN LSB
	DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 0));   //  D4
    2354:	8b a5       	ldd	r24, Y+43	; 0x2b
    2356:	98 2f       	mov	r25, r24
    2358:	91 70       	andi	r25, 0x01	; 1
    235a:	88 e1       	ldi	r24, 0x18	; 24
    235c:	69 2f       	mov	r22, r25
    235e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 1));   //  D5
    2362:	8b a5       	ldd	r24, Y+43	; 0x2b
    2364:	86 95       	lsr	r24
    2366:	98 2f       	mov	r25, r24
    2368:	91 70       	andi	r25, 0x01	; 1
    236a:	89 e1       	ldi	r24, 0x19	; 25
    236c:	69 2f       	mov	r22, r25
    236e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 2));   //  D6
    2372:	8b a5       	ldd	r24, Y+43	; 0x2b
    2374:	86 95       	lsr	r24
    2376:	86 95       	lsr	r24
    2378:	98 2f       	mov	r25, r24
    237a:	91 70       	andi	r25, 0x01	; 1
    237c:	8a e1       	ldi	r24, 0x1A	; 26
    237e:	69 2f       	mov	r22, r25
    2380:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 3));   //  D7
    2384:	8b a5       	ldd	r24, Y+43	; 0x2b
    2386:	86 95       	lsr	r24
    2388:	86 95       	lsr	r24
    238a:	86 95       	lsr	r24
    238c:	98 2f       	mov	r25, r24
    238e:	91 70       	andi	r25, 0x01	; 1
    2390:	8b e1       	ldi	r24, 0x1B	; 27
    2392:	69 2f       	mov	r22, r25
    2394:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>

	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
    2398:	8c e1       	ldi	r24, 0x1C	; 28
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e2       	ldi	r26, 0x20	; 32
    23a6:	b1 e4       	ldi	r27, 0x41	; 65
    23a8:	89 8f       	std	Y+25, r24	; 0x19
    23aa:	9a 8f       	std	Y+26, r25	; 0x1a
    23ac:	ab 8f       	std	Y+27, r26	; 0x1b
    23ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	69 8d       	ldd	r22, Y+25	; 0x19
    23b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	55 e4       	ldi	r21, 0x45	; 69
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	8d 8b       	std	Y+21, r24	; 0x15
    23ca:	9e 8b       	std	Y+22, r25	; 0x16
    23cc:	af 8b       	std	Y+23, r26	; 0x17
    23ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_Write_Char+0x20e>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_Write_Char+0x28c>
	else if (__tmp > 65535)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_Write_Char+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	69 8d       	ldd	r22, Y+25	; 0x19
    240c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_Write_Char+0x26e>
    2434:	80 e9       	ldi	r24, 0x90	; 144
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	9a 8b       	std	Y+18, r25	; 0x12
    243a:	89 8b       	std	Y+17, r24	; 0x11
    243c:	89 89       	ldd	r24, Y+17	; 0x11
    243e:	9a 89       	ldd	r25, Y+18	; 0x12
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_Write_Char+0x25c>
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_Write_Char+0x250>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_Write_Char+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9c 8b       	std	Y+20, r25	; 0x14
    246e:	8b 8b       	std	Y+19, r24	; 0x13
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	9c 89       	ldd	r25, Y+20	; 0x14
    2474:	98 8b       	std	Y+16, r25	; 0x10
    2476:	8f 87       	std	Y+15, r24	; 0x0f
    2478:	8f 85       	ldd	r24, Y+15	; 0x0f
    247a:	98 89       	ldd	r25, Y+16	; 0x10
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_Write_Char+0x298>
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	/* Latch data */
	DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
    2484:	8c e1       	ldi	r24, 0x1C	; 28
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e2       	ldi	r26, 0x20	; 32
    2492:	b1 e4       	ldi	r27, 0x41	; 65
    2494:	8b 87       	std	Y+11, r24	; 0x0b
    2496:	9c 87       	std	Y+12, r25	; 0x0c
    2498:	ad 87       	std	Y+13, r26	; 0x0d
    249a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	6b 85       	ldd	r22, Y+11	; 0x0b
    249e:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	55 e4       	ldi	r21, 0x45	; 69
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8f 83       	std	Y+7, r24	; 0x07
    24b6:	98 87       	std	Y+8, r25	; 0x08
    24b8:	a9 87       	std	Y+9, r26	; 0x09
    24ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <LCD_Write_Char+0x2fa>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <LCD_Write_Char+0x378>
	else if (__tmp > 65535)
    24de:	6f 81       	ldd	r22, Y+7	; 0x07
    24e0:	78 85       	ldd	r23, Y+8	; 0x08
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <LCD_Write_Char+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	0f c0       	rjmp	.+30     	; 0x253e <LCD_Write_Char+0x35a>
    2520:	80 e9       	ldi	r24, 0x90	; 144
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	8b 83       	std	Y+3, r24	; 0x03
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_Write_Char+0x348>
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	69 f7       	brne	.-38     	; 0x2520 <LCD_Write_Char+0x33c>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <LCD_Write_Char+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_Write_Char+0x384>
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
	// Break time Between 2 data
	_delay_ms(10);
}
    2570:	ab 96       	adiw	r28, 0x2b	; 43
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <LCD_Disp_Number>:
/*************************************************************************/
void LCD_Disp_Number(UINT16_t Number) {
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <LCD_Disp_Number+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <LCD_Disp_Number+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
	UINT16_t Length = 0;
    2592:	1a 82       	std	Y+2, r1	; 0x02
    2594:	19 82       	std	Y+1, r1	; 0x01
	Length = Get_Number_Length(Number);
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	0e 94 a6 13 	call	0x274c	; 0x274c <Get_Number_Length>
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
	Number = Reverse_Number(Number);
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	0e 94 6d 13 	call	0x26da	; 0x26da <Reverse_Number>
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
	do {
		Length--;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
		LCD_Write_Char((UINT8_t) (Number % 10) + '0'); //ex : 101
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	2a e0       	ldi	r18, 0x0A	; 10
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	b9 01       	movw	r22, r18
    25c2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__udivmodhi4>
    25c6:	80 5d       	subi	r24, 0xD0	; 208
    25c8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_Write_Char>
	} while (Number /= 10);
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	2a e0       	ldi	r18, 0x0A	; 10
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	b9 01       	movw	r22, r18
    25d6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__udivmodhi4>
    25da:	cb 01       	movw	r24, r22
    25dc:	9c 83       	std	Y+4, r25	; 0x04
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	19 f7       	brne	.-58     	; 0x25ae <LCD_Disp_Number+0x2c>
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <LCD_Disp_Number+0x78>
	while (Length) {
		LCD_Write_Char('0');
    25ea:	80 e3       	ldi	r24, 0x30	; 48
    25ec:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_Write_Char>
		Length--;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
	Number = Reverse_Number(Number);
	do {
		Length--;
		LCD_Write_Char((UINT8_t) (Number % 10) + '0'); //ex : 101
	} while (Number /= 10);
	while (Length) {
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	a1 f7       	brne	.-24     	; 0x25ea <LCD_Disp_Number+0x68>
		LCD_Write_Char('0');
		Length--;
	}
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <LCD_Clear>:
/*************************************************************************/
void LCD_Clear(void){
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(0x00);
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
	LCD_Send_Command(0x01);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <LCD_Write_CGRAM>:
/*************************************************************************/
void LCD_Write_CGRAM(const UINT8_t* Data, CGRAM_ROW_ID_t ROW_ID){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <LCD_Write_CGRAM+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_Write_CGRAM+0x8>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	6d 83       	std	Y+5, r22	; 0x05
	UINT8_t Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	88 30       	cpi	r24, 0x08	; 8
    2642:	08 f5       	brcc	.+66     	; 0x2686 <LCD_Write_CGRAM+0x5c>
		Address = (ROW_ID * 8) | (1 << 6);
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	80 64       	ori	r24, 0x40	; 64
    2658:	8a 83       	std	Y+2, r24	; 0x02
		LCD_Send_Command(Address);
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
		for(Idx = 0; Idx < 8; Idx++){
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <LCD_Write_CGRAM+0x56>
			LCD_Write_Char(Data[Idx]);
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	80 81       	ld	r24, Z
    2676:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_Write_Char>
void LCD_Write_CGRAM(const UINT8_t* Data, CGRAM_ROW_ID_t ROW_ID){
	UINT8_t Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
		Address = (ROW_ID * 8) | (1 << 6);
		LCD_Send_Command(Address);
		for(Idx = 0; Idx < 8; Idx++){
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	88 30       	cpi	r24, 0x08	; 8
    2684:	78 f3       	brcs	.-34     	; 0x2664 <LCD_Write_CGRAM+0x3a>
			LCD_Write_Char(Data[Idx]);
		}
	}
	LCD_Send_Command(0x02);
    2686:	82 e0       	ldi	r24, 0x02	; 2
    2688:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_Send_Command>
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <LCD_Disp_Special_Character>:
/*************************************************************************/
void LCD_Disp_Special_Character(const CGRAM_ROW_ID_t CGRAM_ROW_ID,
								 const LCD_ROW_ID_t ROW,
								 const LCD_COL_ID_t COL)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <LCD_Disp_Special_Character+0x6>
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	6a 83       	std	Y+2, r22	; 0x02
    26ac:	4b 83       	std	Y+3, r20	; 0x03
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS && CGRAM_ROW_ID < CGRAM_MAX_ROWS) {
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	68 f4       	brcc	.+26     	; 0x26ce <LCD_Disp_Special_Character+0x32>
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	80 31       	cpi	r24, 0x10	; 16
    26b8:	50 f4       	brcc	.+20     	; 0x26ce <LCD_Disp_Special_Character+0x32>
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	88 30       	cpi	r24, 0x08	; 8
    26be:	38 f4       	brcc	.+14     	; 0x26ce <LCD_Disp_Special_Character+0x32>
		LCD_Jumb_To(ROW, COL);
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	6b 81       	ldd	r22, Y+3	; 0x03
    26c4:	0e 94 ca 10 	call	0x2194	; 0x2194 <LCD_Jumb_To>
		LCD_Write_Char(CGRAM_ROW_ID);
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_Write_Char>
	}

}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <Reverse_Number>:
/*************************************************************************/
static UINT16_t Reverse_Number(UINT16_t Number) {
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <Reverse_Number+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <Reverse_Number+0x8>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
	UINT16_t Reversed_Number = 0;
    26ea:	1a 82       	std	Y+2, r1	; 0x02
    26ec:	19 82       	std	Y+1, r1	; 0x01
	do {
		Reversed_Number = Reversed_Number * 10 + Number % 10;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	9c 01       	movw	r18, r24
    26f4:	22 0f       	add	r18, r18
    26f6:	33 1f       	adc	r19, r19
    26f8:	c9 01       	movw	r24, r18
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	f9 01       	movw	r30, r18
    2704:	e8 0f       	add	r30, r24
    2706:	f9 1f       	adc	r31, r25
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	2a e0       	ldi	r18, 0x0A	; 10
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__udivmodhi4>
    2716:	8e 0f       	add	r24, r30
    2718:	9f 1f       	adc	r25, r31
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
	} while (Number /= 10);   //ex : 101
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	2a e0       	ldi	r18, 0x0A	; 10
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	b9 01       	movw	r22, r18
    2728:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__udivmodhi4>
    272c:	cb 01       	movw	r24, r22
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	d1 f6       	brne	.-76     	; 0x26ee <Reverse_Number+0x14>
	return Reversed_Number;
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <Get_Number_Length>:
/*************************************************************************/
static UINT16_t Get_Number_Length(UINT16_t Number) {
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <Get_Number_Length+0x6>
    2752:	0f 92       	push	r0
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
	UINT8_t Length = 0;
    275c:	19 82       	std	Y+1, r1	; 0x01
	do {
		Length++;
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	8f 5f       	subi	r24, 0xFF	; 255
    2762:	89 83       	std	Y+1, r24	; 0x01
	} while (Number /= 10);
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	2a e0       	ldi	r18, 0x0A	; 10
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__udivmodhi4>
    2772:	cb 01       	movw	r24, r22
    2774:	9b 83       	std	Y+3, r25	; 0x03
    2776:	8a 83       	std	Y+2, r24	; 0x02
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	9b 81       	ldd	r25, Y+3	; 0x03
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	79 f7       	brne	.-34     	; 0x275e <Get_Number_Length+0x12>
	return Length;
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <SSD_Init>:
#ifndef SSD_H
#include "SSD.h"
/****************************************************************************/
static void SSD_Write(const UINT8_t VALUE);
/****************************************************************************/
void SSD_Init(void){
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62

}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <SSD_Display>:
/****************************************************************************/
void SSD_Display(const UINT8_t VALUE) {
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <SSD_Display+0x6>
    27a6:	0f 92       	push	r0
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	89 83       	std	Y+1, r24	; 0x01
#if SSD_TYPE == COMM_CATHOD
	switch (VALUE) {
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	3b 83       	std	Y+3, r19	; 0x03
    27b6:	2a 83       	std	Y+2, r18	; 0x02
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	91 05       	cpc	r25, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <SSD_Display+0x24>
    27c2:	4f c0       	rjmp	.+158    	; 0x2862 <SSD_Display+0xc2>
    27c4:	2a 81       	ldd	r18, Y+2	; 0x02
    27c6:	3b 81       	ldd	r19, Y+3	; 0x03
    27c8:	25 30       	cpi	r18, 0x05	; 5
    27ca:	31 05       	cpc	r19, r1
    27cc:	d4 f4       	brge	.+52     	; 0x2802 <SSD_Display+0x62>
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	91 05       	cpc	r25, r1
    27d6:	c9 f1       	breq	.+114    	; 0x284a <SSD_Display+0xaa>
    27d8:	2a 81       	ldd	r18, Y+2	; 0x02
    27da:	3b 81       	ldd	r19, Y+3	; 0x03
    27dc:	22 30       	cpi	r18, 0x02	; 2
    27de:	31 05       	cpc	r19, r1
    27e0:	2c f4       	brge	.+10     	; 0x27ec <SSD_Display+0x4c>
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	61 f1       	breq	.+88     	; 0x2842 <SSD_Display+0xa2>
    27ea:	52 c0       	rjmp	.+164    	; 0x2890 <SSD_Display+0xf0>
    27ec:	2a 81       	ldd	r18, Y+2	; 0x02
    27ee:	3b 81       	ldd	r19, Y+3	; 0x03
    27f0:	22 30       	cpi	r18, 0x02	; 2
    27f2:	31 05       	cpc	r19, r1
    27f4:	71 f1       	breq	.+92     	; 0x2852 <SSD_Display+0xb2>
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	83 30       	cpi	r24, 0x03	; 3
    27fc:	91 05       	cpc	r25, r1
    27fe:	69 f1       	breq	.+90     	; 0x285a <SSD_Display+0xba>
    2800:	47 c0       	rjmp	.+142    	; 0x2890 <SSD_Display+0xf0>
    2802:	2a 81       	ldd	r18, Y+2	; 0x02
    2804:	3b 81       	ldd	r19, Y+3	; 0x03
    2806:	27 30       	cpi	r18, 0x07	; 7
    2808:	31 05       	cpc	r19, r1
    280a:	b9 f1       	breq	.+110    	; 0x287a <SSD_Display+0xda>
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	9b 81       	ldd	r25, Y+3	; 0x03
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	91 05       	cpc	r25, r1
    2814:	5c f4       	brge	.+22     	; 0x282c <SSD_Display+0x8c>
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	3b 81       	ldd	r19, Y+3	; 0x03
    281a:	25 30       	cpi	r18, 0x05	; 5
    281c:	31 05       	cpc	r19, r1
    281e:	29 f1       	breq	.+74     	; 0x286a <SSD_Display+0xca>
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	86 30       	cpi	r24, 0x06	; 6
    2826:	91 05       	cpc	r25, r1
    2828:	21 f1       	breq	.+72     	; 0x2872 <SSD_Display+0xd2>
    282a:	32 c0       	rjmp	.+100    	; 0x2890 <SSD_Display+0xf0>
    282c:	2a 81       	ldd	r18, Y+2	; 0x02
    282e:	3b 81       	ldd	r19, Y+3	; 0x03
    2830:	28 30       	cpi	r18, 0x08	; 8
    2832:	31 05       	cpc	r19, r1
    2834:	31 f1       	breq	.+76     	; 0x2882 <SSD_Display+0xe2>
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	9b 81       	ldd	r25, Y+3	; 0x03
    283a:	89 30       	cpi	r24, 0x09	; 9
    283c:	91 05       	cpc	r25, r1
    283e:	29 f1       	breq	.+74     	; 0x288a <SSD_Display+0xea>
    2840:	27 c0       	rjmp	.+78     	; 0x2890 <SSD_Display+0xf0>
	case 0:
		SSD_Write(0X3F);
    2842:	8f e3       	ldi	r24, 0x3F	; 63
    2844:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2848:	23 c0       	rjmp	.+70     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 1:
		SSD_Write(0X06);
    284a:	86 e0       	ldi	r24, 0x06	; 6
    284c:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2850:	1f c0       	rjmp	.+62     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 2:
		SSD_Write(0X5B);
    2852:	8b e5       	ldi	r24, 0x5B	; 91
    2854:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2858:	1b c0       	rjmp	.+54     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 3:
		SSD_Write(0X4F);
    285a:	8f e4       	ldi	r24, 0x4F	; 79
    285c:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2860:	17 c0       	rjmp	.+46     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 4:
		SSD_Write(0X66);
    2862:	86 e6       	ldi	r24, 0x66	; 102
    2864:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2868:	13 c0       	rjmp	.+38     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 5:
		SSD_Write(0X6D);
    286a:	8d e6       	ldi	r24, 0x6D	; 109
    286c:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 6:
		SSD_Write(0X7C);
    2872:	8c e7       	ldi	r24, 0x7C	; 124
    2874:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2878:	0b c0       	rjmp	.+22     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 7:
		SSD_Write(0X07);
    287a:	87 e0       	ldi	r24, 0x07	; 7
    287c:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <SSD_Display+0xf0>
		break;
	case 8:
		SSD_Write(0X7F);
    2882:	8f e7       	ldi	r24, 0x7F	; 127
    2884:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <SSD_Display+0xf0>
		break;
	case 9:
		SSD_Write(0X6F);
    288a:	8f e6       	ldi	r24, 0x6F	; 111
    288c:	0e 94 4e 14 	call	0x289c	; 0x289c <SSD_Write>
	default:
		/* Error */
		break;
	}
#endif
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <SSD_Write>:
/****************************************************************************/
static void SSD_Write(const UINT8_t VALUE){
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	0f 92       	push	r0
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_WRITE_PIN_VALUE(SSD_PIN_A, GET_BIT(VALUE, 0));
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	98 2f       	mov	r25, r24
    28ac:	91 70       	andi	r25, 0x01	; 1
    28ae:	88 e1       	ldi	r24, 0x18	; 24
    28b0:	69 2f       	mov	r22, r25
    28b2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_B, GET_BIT(VALUE, 1));
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	86 95       	lsr	r24
    28ba:	98 2f       	mov	r25, r24
    28bc:	91 70       	andi	r25, 0x01	; 1
    28be:	89 e1       	ldi	r24, 0x19	; 25
    28c0:	69 2f       	mov	r22, r25
    28c2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_C, GET_BIT(VALUE, 2));
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	86 95       	lsr	r24
    28ca:	86 95       	lsr	r24
    28cc:	98 2f       	mov	r25, r24
    28ce:	91 70       	andi	r25, 0x01	; 1
    28d0:	8a e1       	ldi	r24, 0x1A	; 26
    28d2:	69 2f       	mov	r22, r25
    28d4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_D, GET_BIT(VALUE, 3));
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	86 95       	lsr	r24
    28dc:	86 95       	lsr	r24
    28de:	86 95       	lsr	r24
    28e0:	98 2f       	mov	r25, r24
    28e2:	91 70       	andi	r25, 0x01	; 1
    28e4:	8b e1       	ldi	r24, 0x1B	; 27
    28e6:	69 2f       	mov	r22, r25
    28e8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_E, GET_BIT(VALUE, 4));
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	82 95       	swap	r24
    28f0:	8f 70       	andi	r24, 0x0F	; 15
    28f2:	98 2f       	mov	r25, r24
    28f4:	91 70       	andi	r25, 0x01	; 1
    28f6:	8c e1       	ldi	r24, 0x1C	; 28
    28f8:	69 2f       	mov	r22, r25
    28fa:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_F, GET_BIT(VALUE, 5));
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	82 95       	swap	r24
    2902:	86 95       	lsr	r24
    2904:	87 70       	andi	r24, 0x07	; 7
    2906:	98 2f       	mov	r25, r24
    2908:	91 70       	andi	r25, 0x01	; 1
    290a:	8d e1       	ldi	r24, 0x1D	; 29
    290c:	69 2f       	mov	r22, r25
    290e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(SSD_PIN_G, GET_BIT(VALUE, 6));
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	82 95       	swap	r24
    2916:	86 95       	lsr	r24
    2918:	86 95       	lsr	r24
    291a:	83 70       	andi	r24, 0x03	; 3
    291c:	98 2f       	mov	r25, r24
    291e:	91 70       	andi	r25, 0x01	; 1
    2920:	8e e1       	ldi	r24, 0x1E	; 30
    2922:	69 2f       	mov	r22, r25
    2924:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
}
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <SSD_On>:
/****************************************************************************/
void SSD_On(const SSD_ID_t SSD_ID){
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <SSD_On+0x6>
    2936:	0f 92       	push	r0
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	3b 83       	std	Y+3, r19	; 0x03
    2946:	2a 83       	std	Y+2, r18	; 0x02
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	31 f0       	breq	.+12     	; 0x295c <SSD_On+0x2c>
    2950:	2a 81       	ldd	r18, Y+2	; 0x02
    2952:	3b 81       	ldd	r19, Y+3	; 0x03
    2954:	21 30       	cpi	r18, 0x01	; 1
    2956:	31 05       	cpc	r19, r1
    2958:	31 f0       	breq	.+12     	; 0x2966 <SSD_On+0x36>
    295a:	09 c0       	rjmp	.+18     	; 0x296e <SSD_On+0x3e>
	case SSD_UNITS:
			DIO_WRITE_PIN_VALUE(SSD_UNITS_PIN, SSD_STATE_ON);
			break;
#elif SSD_MAX_NUMBERS == 2
	case SSD_UNITS:
		DIO_WRITE_PIN_VALUE(SSD_UNITS_PIN, SSD_STATE_ON);
    295c:	8f e1       	ldi	r24, 0x1F	; 31
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    2964:	04 c0       	rjmp	.+8      	; 0x296e <SSD_On+0x3e>
		break;
	case SSD_TENS:
			DIO_WRITE_PIN_VALUE(SSD_TENS_PIN, SSD_STATE_ON);
    2966:	80 e1       	ldi	r24, 0x10	; 16
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
#endif
	default:
		/* Error: undefined SSD_ID */
		break;
	}
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <SSD_Off>:
/****************************************************************************/
void SSD_Off(const SSD_ID_t SSD_ID){
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	00 d0       	rcall	.+0      	; 0x2980 <SSD_Off+0x6>
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	3b 83       	std	Y+3, r19	; 0x03
    2990:	2a 83       	std	Y+2, r18	; 0x02
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	9b 81       	ldd	r25, Y+3	; 0x03
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	31 f0       	breq	.+12     	; 0x29a6 <SSD_Off+0x2c>
    299a:	2a 81       	ldd	r18, Y+2	; 0x02
    299c:	3b 81       	ldd	r19, Y+3	; 0x03
    299e:	21 30       	cpi	r18, 0x01	; 1
    29a0:	31 05       	cpc	r19, r1
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <SSD_Off+0x36>
    29a4:	09 c0       	rjmp	.+18     	; 0x29b8 <SSD_Off+0x3e>
	case SSD_UNITS:
			DIO_WRITE_PIN_VALUE(SSD_UNITS_PIN, SSD_STATE_OFF);
			break;
#elif SSD_MAX_NUMBERS == 2
	case SSD_UNITS:
		DIO_WRITE_PIN_VALUE(SSD_UNITS_PIN, SSD_STATE_OFF);
    29a6:	8f e1       	ldi	r24, 0x1F	; 31
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <SSD_Off+0x3e>
		break;
	case SSD_TENS:
			DIO_WRITE_PIN_VALUE(SSD_TENS_PIN, SSD_STATE_OFF);
    29b0:	80 e1       	ldi	r24, 0x10	; 16
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
#endif
	default:
		/* Error: undefined SSD_ID */
		break;
	}
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <TMP_Sensor_Init>:

#ifndef TMP_SENSOR_H
#include "TMP_SENSOR.h"
void TMP_Sensor_Init(void){
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
    29cc:	0e 94 74 06 	call	0xce8	; 0xce8 <ADC_Init>
	ADC_Set_Prescaler(DF128);
    29d0:	87 e0       	ldi	r24, 0x07	; 7
    29d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <ADC_Set_Prescaler>
	ADC_Interrupt(ENABLE);
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0e 94 0a 06 	call	0xc14	; 0xc14 <ADC_Interrupt>
	ADC(ENABLE);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC>
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <ADC_Conversion>
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <TMP_Sensor_Read>:
SINT32_t TMP_Sensor_Read(void){
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <TMP_Sensor_Read+0x6>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <TMP_Sensor_Read+0x8>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	SINT32_t Tmp = 0;
    29fc:	19 82       	std	Y+1, r1	; 0x01
    29fe:	1a 82       	std	Y+2, r1	; 0x02
    2a00:	1b 82       	std	Y+3, r1	; 0x03
    2a02:	1c 82       	std	Y+4, r1	; 0x04
	Tmp = ADC_Read();
    2a04:	0e 94 82 06 	call	0xd04	; 0xd04 <ADC_Read>
    2a08:	cc 01       	movw	r24, r24
    2a0a:	a0 e0       	ldi	r26, 0x00	; 0
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	ab 83       	std	Y+3, r26	; 0x03
    2a14:	bc 83       	std	Y+4, r27	; 0x04
	Tmp = (((Tmp * 5000) / 1024)) / 10;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a1e:	28 e8       	ldi	r18, 0x88	; 136
    2a20:	33 e1       	ldi	r19, 0x13	; 19
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__mulsi3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	38 e2       	ldi	r19, 0x28	; 40
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__divmodsi4>
    2a42:	da 01       	movw	r26, r20
    2a44:	c9 01       	movw	r24, r18
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	ab 83       	std	Y+3, r26	; 0x03
    2a4c:	bc 83       	std	Y+4, r27	; 0x04
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	0e 94 ce 05 	call	0xb9c	; 0xb9c <ADC_Conversion>
	return Tmp;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a5c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <TMR0_Set_Prescaler>:
#ifndef TMR0_H
#include "TMR0.h"
void TMR0_Set_Prescaler(const TMR0_PRESCALER_t PRESCALER){
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	0f 92       	push	r0
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0XF8;
    2a7c:	a3 e5       	ldi	r26, 0x53	; 83
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e3 e5       	ldi	r30, 0x53	; 83
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	88 7f       	andi	r24, 0xF8	; 248
    2a88:	8c 93       	st	X, r24
	TCCR0 |= PRESCALER;
    2a8a:	a3 e5       	ldi	r26, 0x53	; 83
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e3 e5       	ldi	r30, 0x53	; 83
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	90 81       	ld	r25, Z
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	89 2b       	or	r24, r25
    2a98:	8c 93       	st	X, r24
}
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <TMR0_Mode>:
void TMR0_Mode(const TMR0_MODE_t MODE){
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <TMR0_Mode+0x6>
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	89 83       	std	Y+1, r24	; 0x01
	switch (MODE) {
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3b 83       	std	Y+3, r19	; 0x03
    2ab8:	2a 83       	std	Y+2, r18	; 0x02
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	21 f1       	breq	.+72     	; 0x2b0c <TMR0_Mode+0x6a>
    2ac4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ac6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	31 05       	cpc	r19, r1
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <TMR0_Mode+0x36>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <TMR0_Mode+0x4c>
    2ad6:	46 c0       	rjmp	.+140    	; 0x2b64 <TMR0_Mode+0xc2>
    2ad8:	2a 81       	ldd	r18, Y+2	; 0x02
    2ada:	3b 81       	ldd	r19, Y+3	; 0x03
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	31 05       	cpc	r19, r1
    2ae0:	21 f1       	breq	.+72     	; 0x2b2a <TMR0_Mode+0x88>
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae6:	83 30       	cpi	r24, 0x03	; 3
    2ae8:	91 05       	cpc	r25, r1
    2aea:	71 f1       	breq	.+92     	; 0x2b48 <TMR0_Mode+0xa6>
    2aec:	3b c0       	rjmp	.+118    	; 0x2b64 <TMR0_Mode+0xc2>
	case TMR0_NORMAL:
		CLEAR_BIT(TCCR0, 3);
    2aee:	a3 e5       	ldi	r26, 0x53	; 83
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e3 e5       	ldi	r30, 0x53	; 83
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	87 7f       	andi	r24, 0xF7	; 247
    2afa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 6);
    2afc:	a3 e5       	ldi	r26, 0x53	; 83
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e3 e5       	ldi	r30, 0x53	; 83
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7b       	andi	r24, 0xBF	; 191
    2b08:	8c 93       	st	X, r24
    2b0a:	2c c0       	rjmp	.+88     	; 0x2b64 <TMR0_Mode+0xc2>
		break;
	case TMR0_PWM:
		SET_BIT(TCCR0, 6);
    2b0c:	a3 e5       	ldi	r26, 0x53	; 83
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e3 e5       	ldi	r30, 0x53	; 83
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	80 64       	ori	r24, 0x40	; 64
    2b18:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 3);
    2b1a:	a3 e5       	ldi	r26, 0x53	; 83
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e3 e5       	ldi	r30, 0x53	; 83
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	87 7f       	andi	r24, 0xF7	; 247
    2b26:	8c 93       	st	X, r24
    2b28:	1d c0       	rjmp	.+58     	; 0x2b64 <TMR0_Mode+0xc2>
		break;
	case TMR0_CTC:
		SET_BIT(TCCR0, 3);
    2b2a:	a3 e5       	ldi	r26, 0x53	; 83
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e3 e5       	ldi	r30, 0x53	; 83
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	88 60       	ori	r24, 0x08	; 8
    2b36:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 6);
    2b38:	a3 e5       	ldi	r26, 0x53	; 83
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e3 e5       	ldi	r30, 0x53	; 83
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	8f 7b       	andi	r24, 0xBF	; 191
    2b44:	8c 93       	st	X, r24
    2b46:	0e c0       	rjmp	.+28     	; 0x2b64 <TMR0_Mode+0xc2>
		break;
	case TMR0_FAST_PWM:
		SET_BIT(TCCR0, 3);
    2b48:	a3 e5       	ldi	r26, 0x53	; 83
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e3 e5       	ldi	r30, 0x53	; 83
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	88 60       	ori	r24, 0x08	; 8
    2b54:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    2b56:	a3 e5       	ldi	r26, 0x53	; 83
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e3 e5       	ldi	r30, 0x53	; 83
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	80 64       	ori	r24, 0x40	; 64
    2b62:	8c 93       	st	X, r24
		break;
	}
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <TMR0_Init>:
void TMR0_Init(void){
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	TMR0_Set_Buffer(TMR0_TCNTR, 0);
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <TMR0_Set_Buffer>
	TMR0_Set_Buffer(TMR0_OCR, 0);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <TMR0_Set_Buffer>
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <TMR0_INT>:
void TMR0_INT(const TMR0_INT_t INT){
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <TMR0_INT+0x6>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	switch(INT){
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	3b 83       	std	Y+3, r19	; 0x03
    2ba4:	2a 83       	std	Y+2, r18	; 0x02
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	91 05       	cpc	r25, r1
    2bae:	e9 f0       	breq	.+58     	; 0x2bea <TMR0_INT+0x5c>
    2bb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2bb2:	3b 81       	ldd	r19, Y+3	; 0x03
    2bb4:	22 30       	cpi	r18, 0x02	; 2
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <TMR0_INT+0x36>
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	61 f0       	breq	.+24     	; 0x2bda <TMR0_INT+0x4c>
    2bc2:	2a c0       	rjmp	.+84     	; 0x2c18 <TMR0_INT+0x8a>
    2bc4:	2a 81       	ldd	r18, Y+2	; 0x02
    2bc6:	3b 81       	ldd	r19, Y+3	; 0x03
    2bc8:	22 30       	cpi	r18, 0x02	; 2
    2bca:	31 05       	cpc	r19, r1
    2bcc:	b1 f0       	breq	.+44     	; 0x2bfa <TMR0_INT+0x6c>
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	83 30       	cpi	r24, 0x03	; 3
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	c9 f0       	breq	.+50     	; 0x2c0a <TMR0_INT+0x7c>
    2bd8:	1f c0       	rjmp	.+62     	; 0x2c18 <TMR0_INT+0x8a>
	case TMR0_OV_INT_ENABLE:
		SET_BIT(TIMSK, 0);
    2bda:	a9 e5       	ldi	r26, 0x59	; 89
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 e5       	ldi	r30, 0x59	; 89
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	81 60       	ori	r24, 0x01	; 1
    2be6:	8c 93       	st	X, r24
    2be8:	17 c0       	rjmp	.+46     	; 0x2c18 <TMR0_INT+0x8a>
		break;
	case TMR0_OV_INT_DISABLE:
		CLEAR_BIT(TIMSK, 0);
    2bea:	a9 e5       	ldi	r26, 0x59	; 89
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e9 e5       	ldi	r30, 0x59	; 89
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8e 7f       	andi	r24, 0xFE	; 254
    2bf6:	8c 93       	st	X, r24
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <TMR0_INT+0x8a>
		break;
	case TMR0_OC_INT_ENABLE:
		SET_BIT(TIMSK, 1);
    2bfa:	a9 e5       	ldi	r26, 0x59	; 89
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e9 e5       	ldi	r30, 0x59	; 89
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	82 60       	ori	r24, 0x02	; 2
    2c06:	8c 93       	st	X, r24
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <TMR0_INT+0x8a>
		break;
	case TMR0_OC_INT_DISABLE:
		CLEAR_BIT(TIMSK, 1);
    2c0a:	a9 e5       	ldi	r26, 0x59	; 89
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e9 e5       	ldi	r30, 0x59	; 89
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	8d 7f       	andi	r24, 0xFD	; 253
    2c16:	8c 93       	st	X, r24
		break;
	}
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <TMR0_OC0>:
void TMR0_OC0(const TMR0_OC0_t STATE){
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	0f 92       	push	r0
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR0, 4);
    2c30:	a3 e5       	ldi	r26, 0x53	; 83
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e3 e5       	ldi	r30, 0x53	; 83
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 7e       	andi	r24, 0xEF	; 239
    2c3c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, 5);
    2c3e:	a3 e5       	ldi	r26, 0x53	; 83
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e3 e5       	ldi	r30, 0x53	; 83
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7d       	andi	r24, 0xDF	; 223
    2c4a:	8c 93       	st	X, r24
	TCCR0 |= (STATE << 4);
    2c4c:	a3 e5       	ldi	r26, 0x53	; 83
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e3 e5       	ldi	r30, 0x53	; 83
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	28 2f       	mov	r18, r24
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	82 95       	swap	r24
    2c60:	92 95       	swap	r25
    2c62:	90 7f       	andi	r25, 0xF0	; 240
    2c64:	98 27       	eor	r25, r24
    2c66:	80 7f       	andi	r24, 0xF0	; 240
    2c68:	98 27       	eor	r25, r24
    2c6a:	82 2b       	or	r24, r18
    2c6c:	8c 93       	st	X, r24
}
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <TMR0_Set_Buffer>:
void TMR0_Set_Buffer(const TMR0_BFF_t BUFFER, const UINT8_t VALUE){
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <TMR0_Set_Buffer+0x6>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <TMR0_Set_Buffer+0x8>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	6a 83       	std	Y+2, r22	; 0x02
	switch (BUFFER) {
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	3c 83       	std	Y+4, r19	; 0x04
    2c8e:	2b 83       	std	Y+3, r18	; 0x03
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	31 f0       	breq	.+12     	; 0x2ca4 <TMR0_Set_Buffer+0x2e>
    2c98:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9c:	21 30       	cpi	r18, 0x01	; 1
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	31 f0       	breq	.+12     	; 0x2cae <TMR0_Set_Buffer+0x38>
    2ca2:	09 c0       	rjmp	.+18     	; 0x2cb6 <TMR0_Set_Buffer+0x40>
	case TMR0_TCNTR:
		TCNT0 = VALUE;
    2ca4:	e2 e5       	ldi	r30, 0x52	; 82
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	80 83       	st	Z, r24
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <TMR0_Set_Buffer+0x40>
		break;
	case TMR0_OCR:
		OCR0 = VALUE;
    2cae:	ec e5       	ldi	r30, 0x5C	; 92
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	80 83       	st	Z, r24
		break;
	default:
		break;

	}
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <TMR0_Read_Buffer>:
UINT8_t TMR0_Read_Buffer(const TMR0_BFF_t BUFFER){
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <TMR0_Read_Buffer+0x6>
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <TMR0_Read_Buffer+0x8>
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
	UINT8_t Buffer = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
	switch (BUFFER) {
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	3c 83       	std	Y+4, r19	; 0x04
    2cdc:	2b 83       	std	Y+3, r18	; 0x03
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	31 f0       	breq	.+12     	; 0x2cf2 <TMR0_Read_Buffer+0x2e>
    2ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cea:	21 30       	cpi	r18, 0x01	; 1
    2cec:	31 05       	cpc	r19, r1
    2cee:	31 f0       	breq	.+12     	; 0x2cfc <TMR0_Read_Buffer+0x38>
    2cf0:	09 c0       	rjmp	.+18     	; 0x2d04 <TMR0_Read_Buffer+0x40>
		case TMR0_TCNTR:
			Buffer = TCNT0;
    2cf2:	e2 e5       	ldi	r30, 0x52	; 82
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <TMR0_Read_Buffer+0x40>
			break;
		case TMR0_OCR:
			Buffer = OCR0;
    2cfc:	ec e5       	ldi	r30, 0x5C	; 92
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	return Buffer;
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <led>:
}
ISR(ADC_VECT){
	Flag = 1;
}
#endif
void led(void){
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_PIN_VALUE(DIO_PINA0, 1^DIO_READ_PIN_VALUE(DIO_PINA0));
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <DIO_READ_PIN_VALUE>
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	98 27       	eor	r25, r24
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	69 2f       	mov	r22, r25
    2d2a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_WRITE_PIN_VALUE>
}
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <SSD_Update>:
void SSD_Update(void){
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
	static UINT8_t Flag = 1, Counter = 200, Time = 0;
	--Counter;
    2d3c:	80 91 88 00 	lds	r24, 0x0088
    2d40:	81 50       	subi	r24, 0x01	; 1
    2d42:	80 93 88 00 	sts	0x0088, r24
	if(0 == Counter){
    2d46:	80 91 88 00 	lds	r24, 0x0088
    2d4a:	88 23       	and	r24, r24
    2d4c:	71 f4       	brne	.+28     	; 0x2d6a <SSD_Update+0x36>
		Counter = 200;
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	80 93 88 00 	sts	0x0088, r24
		Time++;
    2d54:	80 91 d2 00 	lds	r24, 0x00D2
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	80 93 d2 00 	sts	0x00D2, r24
		if(Time > 59){
    2d5e:	80 91 d2 00 	lds	r24, 0x00D2
    2d62:	8c 33       	cpi	r24, 0x3C	; 60
    2d64:	10 f0       	brcs	.+4      	; 0x2d6a <SSD_Update+0x36>
			Time = 0;
    2d66:	10 92 d2 00 	sts	0x00D2, r1
		}
	}
	if(Flag){
    2d6a:	80 91 89 00 	lds	r24, 0x0089
    2d6e:	88 23       	and	r24, r24
    2d70:	91 f0       	breq	.+36     	; 0x2d96 <SSD_Update+0x62>
		SSD_Off(SSD_TENS);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	0e 94 bd 14 	call	0x297a	; 0x297a <SSD_Off>
		SSD_On(SSD_UNITS);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	0e 94 98 14 	call	0x2930	; 0x2930 <SSD_On>
		SSD_Display(Time % 10);
    2d7e:	80 91 d2 00 	lds	r24, 0x00D2
    2d82:	9a e0       	ldi	r25, 0x0A	; 10
    2d84:	69 2f       	mov	r22, r25
    2d86:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__udivmodqi4>
    2d8a:	89 2f       	mov	r24, r25
    2d8c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <SSD_Display>
		Flag = 0;
    2d90:	10 92 89 00 	sts	0x0089, r1
    2d94:	11 c0       	rjmp	.+34     	; 0x2db8 <SSD_Update+0x84>
	}else{
		SSD_Off(SSD_UNITS);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	0e 94 bd 14 	call	0x297a	; 0x297a <SSD_Off>
		SSD_On(SSD_TENS);
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	0e 94 98 14 	call	0x2930	; 0x2930 <SSD_On>
		SSD_Display(Time / 10);
    2da2:	80 91 d2 00 	lds	r24, 0x00D2
    2da6:	9a e0       	ldi	r25, 0x0A	; 10
    2da8:	69 2f       	mov	r22, r25
    2daa:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__udivmodqi4>
    2dae:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <SSD_Display>
		Flag = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	80 93 89 00 	sts	0x0089, r24
	}
}
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <main>:
int main(void){
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT();
    2dc6:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_INIT>
	CO_SCH_Init();
    2dca:	0e 94 fe 06 	call	0xdfc	; 0xdfc <CO_SCH_Init>
	CO_SCH_Add_Task(led, 0, 1);
    2dce:	8a e8       	ldi	r24, 0x8A	; 138
    2dd0:	96 e1       	ldi	r25, 0x16	; 22
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	0e 94 28 07 	call	0xe50	; 0xe50 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(SSD_Update, 0, 1);
    2dda:	8a e9       	ldi	r24, 0x9A	; 154
    2ddc:	96 e1       	ldi	r25, 0x16	; 22
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 28 07 	call	0xe50	; 0xe50 <CO_SCH_Add_Task>
	CO_SCH_Start();
    2de6:	0e 94 8b 08 	call	0x1116	; 0x1116 <CO_SCH_Start>
	while(1){
		CO_SCH_Dispatch_Tasks();
    2dea:	0e 94 98 07 	call	0xf30	; 0xf30 <CO_SCH_Dispatch_Tasks>
    2dee:	fd cf       	rjmp	.-6      	; 0x2dea <main+0x2c>

00002df0 <__mulsi3>:
    2df0:	62 9f       	mul	r22, r18
    2df2:	d0 01       	movw	r26, r0
    2df4:	73 9f       	mul	r23, r19
    2df6:	f0 01       	movw	r30, r0
    2df8:	82 9f       	mul	r24, r18
    2dfa:	e0 0d       	add	r30, r0
    2dfc:	f1 1d       	adc	r31, r1
    2dfe:	64 9f       	mul	r22, r20
    2e00:	e0 0d       	add	r30, r0
    2e02:	f1 1d       	adc	r31, r1
    2e04:	92 9f       	mul	r25, r18
    2e06:	f0 0d       	add	r31, r0
    2e08:	83 9f       	mul	r24, r19
    2e0a:	f0 0d       	add	r31, r0
    2e0c:	74 9f       	mul	r23, r20
    2e0e:	f0 0d       	add	r31, r0
    2e10:	65 9f       	mul	r22, r21
    2e12:	f0 0d       	add	r31, r0
    2e14:	99 27       	eor	r25, r25
    2e16:	72 9f       	mul	r23, r18
    2e18:	b0 0d       	add	r27, r0
    2e1a:	e1 1d       	adc	r30, r1
    2e1c:	f9 1f       	adc	r31, r25
    2e1e:	63 9f       	mul	r22, r19
    2e20:	b0 0d       	add	r27, r0
    2e22:	e1 1d       	adc	r30, r1
    2e24:	f9 1f       	adc	r31, r25
    2e26:	bd 01       	movw	r22, r26
    2e28:	cf 01       	movw	r24, r30
    2e2a:	11 24       	eor	r1, r1
    2e2c:	08 95       	ret

00002e2e <__udivmodqi4>:
    2e2e:	99 1b       	sub	r25, r25
    2e30:	79 e0       	ldi	r23, 0x09	; 9
    2e32:	04 c0       	rjmp	.+8      	; 0x2e3c <__udivmodqi4_ep>

00002e34 <__udivmodqi4_loop>:
    2e34:	99 1f       	adc	r25, r25
    2e36:	96 17       	cp	r25, r22
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <__udivmodqi4_ep>
    2e3a:	96 1b       	sub	r25, r22

00002e3c <__udivmodqi4_ep>:
    2e3c:	88 1f       	adc	r24, r24
    2e3e:	7a 95       	dec	r23
    2e40:	c9 f7       	brne	.-14     	; 0x2e34 <__udivmodqi4_loop>
    2e42:	80 95       	com	r24
    2e44:	08 95       	ret

00002e46 <__udivmodhi4>:
    2e46:	aa 1b       	sub	r26, r26
    2e48:	bb 1b       	sub	r27, r27
    2e4a:	51 e1       	ldi	r21, 0x11	; 17
    2e4c:	07 c0       	rjmp	.+14     	; 0x2e5c <__udivmodhi4_ep>

00002e4e <__udivmodhi4_loop>:
    2e4e:	aa 1f       	adc	r26, r26
    2e50:	bb 1f       	adc	r27, r27
    2e52:	a6 17       	cp	r26, r22
    2e54:	b7 07       	cpc	r27, r23
    2e56:	10 f0       	brcs	.+4      	; 0x2e5c <__udivmodhi4_ep>
    2e58:	a6 1b       	sub	r26, r22
    2e5a:	b7 0b       	sbc	r27, r23

00002e5c <__udivmodhi4_ep>:
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	5a 95       	dec	r21
    2e62:	a9 f7       	brne	.-22     	; 0x2e4e <__udivmodhi4_loop>
    2e64:	80 95       	com	r24
    2e66:	90 95       	com	r25
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	08 95       	ret

00002e6e <__divmodsi4>:
    2e6e:	97 fb       	bst	r25, 7
    2e70:	09 2e       	mov	r0, r25
    2e72:	05 26       	eor	r0, r21
    2e74:	0e d0       	rcall	.+28     	; 0x2e92 <__divmodsi4_neg1>
    2e76:	57 fd       	sbrc	r21, 7
    2e78:	04 d0       	rcall	.+8      	; 0x2e82 <__divmodsi4_neg2>
    2e7a:	14 d0       	rcall	.+40     	; 0x2ea4 <__udivmodsi4>
    2e7c:	0a d0       	rcall	.+20     	; 0x2e92 <__divmodsi4_neg1>
    2e7e:	00 1c       	adc	r0, r0
    2e80:	38 f4       	brcc	.+14     	; 0x2e90 <__divmodsi4_exit>

00002e82 <__divmodsi4_neg2>:
    2e82:	50 95       	com	r21
    2e84:	40 95       	com	r20
    2e86:	30 95       	com	r19
    2e88:	21 95       	neg	r18
    2e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255

00002e90 <__divmodsi4_exit>:
    2e90:	08 95       	ret

00002e92 <__divmodsi4_neg1>:
    2e92:	f6 f7       	brtc	.-4      	; 0x2e90 <__divmodsi4_exit>
    2e94:	90 95       	com	r25
    2e96:	80 95       	com	r24
    2e98:	70 95       	com	r23
    2e9a:	61 95       	neg	r22
    2e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea2:	08 95       	ret

00002ea4 <__udivmodsi4>:
    2ea4:	a1 e2       	ldi	r26, 0x21	; 33
    2ea6:	1a 2e       	mov	r1, r26
    2ea8:	aa 1b       	sub	r26, r26
    2eaa:	bb 1b       	sub	r27, r27
    2eac:	fd 01       	movw	r30, r26
    2eae:	0d c0       	rjmp	.+26     	; 0x2eca <__udivmodsi4_ep>

00002eb0 <__udivmodsi4_loop>:
    2eb0:	aa 1f       	adc	r26, r26
    2eb2:	bb 1f       	adc	r27, r27
    2eb4:	ee 1f       	adc	r30, r30
    2eb6:	ff 1f       	adc	r31, r31
    2eb8:	a2 17       	cp	r26, r18
    2eba:	b3 07       	cpc	r27, r19
    2ebc:	e4 07       	cpc	r30, r20
    2ebe:	f5 07       	cpc	r31, r21
    2ec0:	20 f0       	brcs	.+8      	; 0x2eca <__udivmodsi4_ep>
    2ec2:	a2 1b       	sub	r26, r18
    2ec4:	b3 0b       	sbc	r27, r19
    2ec6:	e4 0b       	sbc	r30, r20
    2ec8:	f5 0b       	sbc	r31, r21

00002eca <__udivmodsi4_ep>:
    2eca:	66 1f       	adc	r22, r22
    2ecc:	77 1f       	adc	r23, r23
    2ece:	88 1f       	adc	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	1a 94       	dec	r1
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <__udivmodsi4_loop>
    2ed6:	60 95       	com	r22
    2ed8:	70 95       	com	r23
    2eda:	80 95       	com	r24
    2edc:	90 95       	com	r25
    2ede:	9b 01       	movw	r18, r22
    2ee0:	ac 01       	movw	r20, r24
    2ee2:	bd 01       	movw	r22, r26
    2ee4:	cf 01       	movw	r24, r30
    2ee6:	08 95       	ret

00002ee8 <__prologue_saves__>:
    2ee8:	2f 92       	push	r2
    2eea:	3f 92       	push	r3
    2eec:	4f 92       	push	r4
    2eee:	5f 92       	push	r5
    2ef0:	6f 92       	push	r6
    2ef2:	7f 92       	push	r7
    2ef4:	8f 92       	push	r8
    2ef6:	9f 92       	push	r9
    2ef8:	af 92       	push	r10
    2efa:	bf 92       	push	r11
    2efc:	cf 92       	push	r12
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	ca 1b       	sub	r28, r26
    2f12:	db 0b       	sbc	r29, r27
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	09 94       	ijmp

00002f20 <__epilogue_restores__>:
    2f20:	2a 88       	ldd	r2, Y+18	; 0x12
    2f22:	39 88       	ldd	r3, Y+17	; 0x11
    2f24:	48 88       	ldd	r4, Y+16	; 0x10
    2f26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f32:	b9 84       	ldd	r11, Y+9	; 0x09
    2f34:	c8 84       	ldd	r12, Y+8	; 0x08
    2f36:	df 80       	ldd	r13, Y+7	; 0x07
    2f38:	ee 80       	ldd	r14, Y+6	; 0x06
    2f3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f40:	aa 81       	ldd	r26, Y+2	; 0x02
    2f42:	b9 81       	ldd	r27, Y+1	; 0x01
    2f44:	ce 0f       	add	r28, r30
    2f46:	d1 1d       	adc	r29, r1
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	ed 01       	movw	r28, r26
    2f54:	08 95       	ret

00002f56 <_exit>:
    2f56:	f8 94       	cli

00002f58 <__stop_program>:
    2f58:	ff cf       	rjmp	.-2      	; 0x2f58 <__stop_program>
